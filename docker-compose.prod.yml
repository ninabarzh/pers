# docker-compose.prod.yml
services:
  typesense:
    extends:
      file: docker-compose.yml
      service: typesense
    environment:
      TYPESENSE_API_KEY: ${PROD_TYPESENSE_API_KEY}
      TYPESENSE_DATA_DIR: ${PROD_TYPESENSE_DATA_DIR}
    networks:
      app-network:
        aliases: [typesense]
    volumes:
    - type: volume
      source: typesense_data
      target: /data
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  backend:
    extends:
      file: docker-compose.yml
      service: backend
    build:
      context: ./backend  # Key change
      dockerfile: Dockerfile.prod
    environment:
      PATH: "/usr/local/bin:/root/.local/bin:${PATH}"
      PYTHONPATH: ${PROD_BACKEND_PYTHONPATH}
      TYPESENSE_HOST: typesense
      TYPESENSE_PORT: ${PROD_TYPESENSE_PORT:-8108}
      TYPESENSE_API_KEY: ${PROD_TYPESENSE_API_KEY}
      BACKEND_PORT: ${PROD_BACKEND_PORT:-8000}
      TYPESENSE_PROTOCOL: http
      # timeout/retry parameters
      BACKEND_STARTUP_DELAY: 10
      TYPESENSE_CONNECTION_TIMEOUT: 30
      TYPESENSE_HEALTHCHECK_RETRIES: 5
    volumes:
      - type: volume
        source: static_volume
        target: /app/static
        read_only: false
      # - ./backend/src:/app/src:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:$${BACKEND_PORT:-8000}/health || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 60s

  frontend:
    extends:
      file: docker-compose.yml
      service: frontend
    build:
      context: ./frontend  # Key change
      dockerfile: Dockerfile.prod
    environment:
      PYTHONPATH: ${PROD_FRONTEND_PYTHONPATH}
      FRONTEND_PORT: 8001
    volumes:
      - type: volume
        source: static_volume
        target: /var/www/static
        read_only: true
      # - ./frontend/src:/app/src:ro
    networks:
      - app-network
    depends_on:
      backend:
        condition: service_healthy

  nginx:
    extends:
      file: docker-compose.yml
      service: nginx
    volumes:
      - type: bind
        source: ./nginx/nginx.prod.conf
        target: /etc/nginx/nginx.conf
      - type: bind
        source: ./nginx/snippets
        target: /etc/nginx/snippets
      - type: volume
        source: static_volume
        target: /var/www/static
      - type: volume
        source: certbot_www
        target: /var/www/certbot
      - type: volume
        source: certbot_conf
        target: /etc/letsencrypt
    networks:
      app-network:
        aliases:
          - ${DOMAIN}
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend

  certbot:
    extends:
      file: docker-compose.yml
      service: certbot
    networks:
      - app-network

volumes:
  typesense_data:
    driver: local
    name: typesense_data
  static_volume:
    driver: local
    name: static_volume
  certbot_www:
    driver: local
    name: certbot_www
  certbot_conf:
    driver: local
    name: certbot_conf

networks:
  app-network:
    driver: bridge
    attachable: true