# docker-compose.prod.yml
services:
  typesense:
    build:
      context: .
      dockerfile: backend/Dockerfile.typesense.prod
    environment:
      - TYPESENSE_API_KEY=${TYPESENSE_API_KEY}
      - TYPESENSE_DATA_DIR=/data
      - GOTRACEBACK=all
      - TYPESENSE_TIMEOUT_SECONDS=30
    command: >
      sh -c "mkdir -p $${TYPESENSE_DATA_DIR} &&
      /usr/bin/typesense-server
      --data-dir=$${TYPESENSE_DATA_DIR}
      --api-key=$${TYPESENSE_API_KEY}
      --listen-port=8108
      --enable-cors
      --max-memory-ratio=0.8
      --snapshot-interval=120"
    volumes:
      - typesense_data:/data
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '1.5'
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:8108/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 60s
    networks:
      - app-network
    restart: unless-stopped
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    env_file: .env
    environment:
      - ENV=production
      - DEBUG=false
      - PYTHONPATH=/app/src
      - TYPESENSE_API_KEY=${TYPESENSE_API_KEY}
      - TYPESENSE_HOST=typesense
      - TYPESENSE_PORT=8108
      - TYPESENSE_PROTOCOL=http
      - STARTUP_DELAY=15
      - PROTON_SMTP_CREDENTIALS=${PROTON_SMTP_CREDENTIALS}
      - SMTP_SERVER=smtp.protonmail.ch
      - SMTP_PORT=587
      - DEFAULT_FROM_EMAIL=green@tymyrddin.dev
      - CONTACT_RECIPIENT=green@tymyrddin.dev
      - FRIENDLY_CAPTCHA_SECRET=${FRIENDLY_CAPTCHA_SECRET}
      - DOMAIN=${DOMAIN}
      - SMTP_TIMEOUT=30
    volumes:
      - /home/deploy/app/.env:/app/.env:ro
      - static_volume:/app/src/static
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s
    command: >
      sh -c "sleep $${STARTUP_DELAY};
      uvicorn src.app.main:app --host 0.0.0.0 --port 8000 --no-access-log"
    depends_on:
      typesense:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    env_file: .env
    environment:
      - ENV=production
      - DEBUG=false
      - FRONTEND_PORT=8001
      - BACKEND_URL=https://${DOMAIN}
      - CSRF_SECRET_KEY=${CSRF_SECRET_KEY}
    volumes:
      - static_volume:/var/www/static:rw
      - /home/deploy/app/.env:/app/.env:ro
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8001/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  nginx:
    image: nginx:1.25-alpine
    user: "1001:1001"
    volumes:
      - ./nginx/cache:/var/cache/nginx
      - /home/deploy/app_data/certbot/conf:/etc/letsencrypt:ro
      - /home/deploy/app_data/certbot/www:/var/www/certbot:ro
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/snippets:/etc/nginx/snippets:ro
      - static_volume:/var/www/static:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      certbot:
        condition: service_healthy
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    command: >
      sh -c '
      echo "Waiting for SSL certificates...";
      while [ ! -f "/etc/letsencrypt/live/finder.green/fullchain.pem" ]; do
        sleep 5;
      done;
      echo "Starting Nginx...";
      nginx -t && nginx -g "daemon off;"
      '
    networks:
      - app-network
    restart: unless-stopped

  certbot:
    image: certbot/certbot:latest
    volumes:
      - certbot_www:/var/www/certbot
      - certbot_conf:/etc/letsencrypt
    entrypoint: "/bin/sh -c"
    command: |
      "trap exit TERM; while :; do
        certbot renew --webroot -w /var/www/certbot --post-hook 'nginx -s reload';
        sleep 12h;
      done"
    environment:
      - EMAIL=${EMAIL}
      - DOMAIN=${DOMAIN}
    healthcheck:
      test: [ "CMD-SHELL", "certbot certificates --noninteractive | grep -q 'VALID' || exit 1" ]
      interval: 1m
      timeout: 30s
      retries: 5
      start_period: 2m
    networks:
      - app-network
    restart: unless-stopped

volumes:
  typesense_data:
    driver: local
    driver_opts:
      type: none
      device: /home/deploy/app_data/typesense
      o: bind
  static_volume:
    driver: local
  certbot_www:
  certbot_conf:

networks:
  app-network:
    name: pers-network
    driver: bridge
    attachable: true
    ipam:
      config:
        - subnet: 172.20.0.0/24
          gateway: 172.20.0.1
