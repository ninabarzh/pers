# docker-compose.prod.yml
services:
  typesense:
    build:
      context: .
      dockerfile: backend/Dockerfile.typesense
    environment:
      - TYPESENSE_API_KEY=${TYPESENSE_API_KEY}
      - TYPESENSE_DATA_DIR=${TYPESENSE_DATA_DIR}
      - TYPESENSE_STARTUP_WAIT_SECONDS=30
    volumes:
        - typesense_data:/data
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8108/health"]
      interval: 15s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    environment:
      - ENV=production
      - DEBUG=false
      - PYTHONPATH=/app/src
      - TYPESENSE_API_KEY=${TYPESENSE_API_KEY}
      - TYPESENSE_HOST=${TYPESENSE_HOST}
      - TYPESENSE_PORT=${TYPESENSE_PORT}
      - TYPESENSE_PROTOCOL=${TYPESENSE_PROTOCOL}
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      typesense:
        condition: service_healthy
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend  # Fixed path (was .frontend)
      dockerfile: Dockerfile.prod
    environment:
      - ENV=production
      - BACKEND_URL=https://${DOMAIN}/api  # Changed from PROD_DOMAIN to DOMAIN
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network

  nginx:
    image: nginx:1.25-alpine
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/snippets:/etc/nginx/snippets
      - static_volume:/var/www/static
      - certbot_www:/var/www/certbot
      - certbot_conf:/etc/letsencrypt
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
      - certbot
    networks:
      - app-network

  certbot:
    image: certbot/certbot:latest
    volumes:
      - certbot_www:/var/www/certbot
      - certbot_conf:/etc/letsencrypt
    entrypoint: "/bin/sh -c"
    command: |
      "trap exit TERM; while :; do
        certbot renew --webroot -w /var/www/certbot;
        sleep 12h & wait $!;
      done"
    restart: unless-stopped
    networks:
      - app-network

volumes:
  static_volume:
    driver_opts:
      type: none
      device: /data/static
      o: bind
  certbot_www:
  certbot_conf:

networks:
  app-network:
    driver: bridge
