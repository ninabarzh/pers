# docker-compose.prod.yml
services:
  typesense:
    build:
      context: .
      dockerfile: backend/Dockerfile.typesense.prod
    environment:
      - TYPESENSE_API_KEY=${TYPESENSE_API_KEY}
      - TYPESENSE_DATA_DIR=/data
      - GOTRACEBACK=all # For better debugging
      - TYPESENSE_TIMEOUT_SECONDS=30
    command: >
      sh -c "mkdir -p $${TYPESENSE_DATA_DIR} &&
      echo 'Starting Typesense server...' &&
      /usr/bin/typesense-server
      --data-dir=$${TYPESENSE_DATA_DIR}
      --api-key=$${TYPESENSE_API_KEY}
      --listen-port=8108
      --enable-cors
      --max-memory-ratio=0.8
      --snapshot-interval=120"
    volumes:
        - typesense_data:/data
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '1.5'
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:8108/health || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 20
      start_period: 30s #initial grace period
    networks:
      - app-network
    restart: unless-stopped
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    env_file: .env
    environment:
      - ENV=production
      - DEBUG=false
      - PYTHONPATH=/app/src
      - TYPESENSE_API_KEY=${TYPESENSE_API_KEY}
      - TYPESENSE_HOST=typesense
      - TYPESENSE_PORT=8108
      - TYPESENSE_PROTOCOL=http
      - STARTUP_DELAY=15
      - PROTON_SMTP_CREDENTIALS=${PROTON_SMTP_CREDENTIALS}  # Format: "green@tymyrddin.dev:token"
      - SMTP_SERVER=smtp.protonmail.ch  # Proton's SMTP server
      - SMTP_PORT=587                   # Proton's SMTP port
      - DEFAULT_FROM_EMAIL=green@tymyrddin.dev
      - CONTACT_RECIPIENT=green@tymyrddin.dev
      - FRIENDLY_CAPTCHA_SECRET=${FRIENDLY_CAPTCHA_SECRET}
      - DOMAIN=${DOMAIN}
      - SMTP_TIMEOUT=10
    volumes:
      - /home/deploy/app/.env:/app/.env:ro  # Mount the env file
      - static_volume:/app/src/static # Mount static files
    user: "deploy:docker"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10  # Increased from 3
      start_period: 60s  # Increased grace period
    command: >
      sh -c "echo 'Waiting $${STARTUP_DELAY}s for dependencies...';
      sleep $${STARTUP_DELAY};
      echo 'Starting Uvicorn...';
      uvicorn src.app.main:app --host 0.0.0.0 --port 8000 --no-access-log;
      echo 'Uvicorn exited with status $?'"
    depends_on:
      typesense:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    env_file: .env
    environment:
      - ENV=production
      - DEBUG=false
      - FRONTEND_PORT=8001
      - BACKEND_URL=https://${DOMAIN}
      - CSRF_SECRET_KEY=${CSRF_SECRET_KEY}
    volumes:
      - static_volume:/var/www/static:rw
      - /home/deploy/app/.env:/app/.env:ro
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
    healthcheck:
      test: [
        "CMD-SHELL",
        "curl -f http://localhost:8001/ || exit 1"
      ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network

  nginx:
    image: nginx:1.25-alpine
    # production server deploy:docker UID/GID
    user: "1001:1001"
    volumes:
      - ./nginx/cache/client_temp:/var/cache/nginx/client_temp
      - ./nginx/cache/proxy_temp:/var/cache/nginx/proxy_temp
      - ./nginx/cache/fastcgi_temp:/var/cache/nginx/fastcgi_temp
      - ./nginx/cache/uwsgi_temp:/var/cache/nginx/uwsgi_temp
      - ./nginx/cache/scgi_temp:/var/cache/nginx/scgi_temp
      - /home/deploy/app_data/certbot/conf:/etc/letsencrypt:ro
      - /home/deploy/app_data/certbot/www:/var/www/certbot:ro
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/snippets:/etc/nginx/snippets:ro
      - ./nginx/config/dhparam:/etc/nginx/dhparam:ro
      - static_volume:/var/www/static:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    # Ensure certs exist
    command:  >
      sh -c '
      while [ ! -f "/etc/letsencrypt/live/finder.green/fullchain.pem" ]; do
        echo "Waiting for SSL certificates...";
        sleep 5;
      done;
      nginx -t && nginx -g "daemon off;"
      '
    restart: unless-stopped
    networks:
      - app-network

  certbot:
    image: certbot/certbot:latest
    volumes:
      - certbot_www:/var/www/certbot  # For ACME challenges
      - certbot_conf:/etc/letsencrypt # For certificates
    entrypoint: "/bin/sh -c"
    command: |
      "trap exit TERM; while :; do
        certbot renew \
          --webroot -w /var/www/certbot \
          --post-hook 'nginx -s reload' &&
        sleep 12h &
        wait $$!
      done"
    environment:
      - EMAIL=${EMAIL}
      - DOMAIN=${DOMAIN}
    healthcheck:
      test: ["CMD-SHELL", "certbot certificates --noninteractive | grep -q 'VALID' || exit 1"]
      interval: 1h
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
    restart: unless-stopped
    networks:
      app-network:
        aliases:
          - certbot

volumes:
  typesense_data:
    driver: local
    driver_opts:
      type: none
      device: /home/deploy/app_data/typesense
      o: bind
  static_volume:
    driver: local
  certbot_www:
  certbot_conf:

networks:
  app-network:
    name: pers-network
    driver: bridge
    attachable: true
    ipam:
      config:
        - subnet: 172.20.0.0/24
          gateway: 172.20.0.1
