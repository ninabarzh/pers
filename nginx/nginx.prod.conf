# nginx.prod.conf

# Main configuration
worker_processes auto;
pid /var/run/nginx.pid;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main buffer=64k flush=5m;
    error_log /var/log/nginx/error.log warn;

    # Optimization
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 75s;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    server_names_hash_bucket_size 64;

    # Compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;
    gzip_min_length 256;

    # Security
    server_tokens off;
    client_max_body_size 100M;
    reset_timedout_connection on;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/m;
    limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=20r/m;

    # Include security snippets
    include snippets/ssl-params.conf;
    include snippets/security-headers.conf;
    include snippets/cors.conf;
    include snippets/proxy-headers.conf;

    # HTTP server for redirection and ACME challenges
    server {
        listen 80;
        server_name ${DOMAIN} www.${DOMAIN};

        # Security headers for HTTP (before HTTPS redirect)
        include snippets/security-headers.conf;

        location ^~ /.well-known/acme-challenge/ {
            root /var/www/certbot;
            allow all;
        }

        location / {
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS server
    server {
        listen 443 ssl reuseport;
        listen [::]:443 ssl reuseport;
        http2 on;
        server_name finder.green www.finder.green;

        # SSL certificates
        ssl_certificate /etc/letsencrypt/live/finder.green/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/finder.green/privkey.pem;
        include snippets/ssl-params.conf;

        # Static files
        location /static/ {
            alias /var/www/static/;
            expires 1y;
            access_log off;
            add_header Cache-Control "public, immutable";
            gzip_static on;
            try_files $uri $uri/ =404;
        }

        # Backend API routes
        location ~ ^/(search|upload|health) {
            limit_req zone=api_limit burst=50 nodelay;
            proxy_pass http://backend:8000;
            include snippets/proxy-headers.conf;
        }

        # Frontend proxy
        location / {
            # Include CORS headers
            include snippets/cors.conf;

            # Handle OPTIONS directly
            limit_except OPTIONS {
                proxy_pass http://frontend:8001;
            }

            # Return 204 for OPTIONS
            if ($request_method = 'OPTIONS') {
                return 204;
            }

            proxy_pass http://frontend:8001/;
            include snippets/proxy-headers.conf;

            # Buffer settings
            proxy_buffering off;
            proxy_request_buffering off;
        }

        # Security locations
        location ~ /\.(?!well-known) {
            deny all;
            access_log off;
            log_not_found off;
            return 404;
        }

        # Let's Encrypt renewal
        location ^~ /.well-known/acme-challenge/ {
            root /var/www/certbot;
            allow all;
        }
    }
}