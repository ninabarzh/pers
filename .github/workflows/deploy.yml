# .github/workflows/deploy.yml
name: Deploy to Production

on:
  push:
    branches: [main]

env:
  PROJECT_DIR: /opt/pers
  COMPOSE_FILE: docker-compose.prod.yml
  SSH_OPTS: "-o StrictHostKeyChecking=yes -o IdentitiesOnly=yes -o LogLevel=ERROR"

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # === SSH SETUP (ONCE) ===
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.HETZNER_SERVER_IP }} ${{ secrets.HETZNER_SERVER_FINGERPRINT }}" > ~/.ssh/known_hosts
          echo "${{ secrets.HETZNER_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          
          # Verify connection
          if ! ssh -T $SSH_OPTS -i ~/.ssh/id_ed25519 deploy@${{ secrets.HETZNER_SERVER_IP }} echo "SSH verified"; then
            echo "::error::SSH verification failed"
            exit 1
          fi

      # === DEPLOY CODE ===
      - name: Rsync code to server
        run: |
          rsync -avz --delete \
            -e "ssh $SSH_OPTS -i ~/.ssh/id_ed25519" \
            --exclude=".git" \
            --exclude=".github" \
            --exclude="node_modules" \
            --exclude=".env" \
            --exclude="data" \
            --exclude="*.pyc" \
            --exclude="__pycache__" \
            ./ deploy@${{ secrets.HETZNER_SERVER_IP }}:$PROJECT_DIR/

      # === SERVER OPERATIONS ===
      - name: Initialize server
        run: |
          ssh $SSH_OPTS -i ~/.ssh/id_ed25519 deploy@${{ secrets.HETZNER_SERVER_IP }} <<'EOF'
            set -euxo pipefail
            cd $PROJECT_DIR
            mkdir -p data/{typesense,certbot/{conf,www}} nginx/snippets
            chmod -R 755 data
            
            # Safely create .env
            umask 077
            cat > .env <<CONFIG
            # Backend
            PROD_BACKEND_PORT=${{ secrets.PROD_BACKEND_PORT }}
            PROD_BACKEND_PYTHONPATH=${{ secrets.PROD_BACKEND_PYTHONPATH }}
            
            # Frontend
            PROD_FRONTEND_PORT=${{ secrets.PROD_FRONTEND_PORT }}
            PROD_FRONTEND_PYTHONPATH=${{ secrets.PROD_FRONTEND_PYTHONPATH }}
            
            # Typesense
            PROD_TYPESENSE_API_KEY=${{ secrets.PROD_TYPESENSE_API_KEY }}
            PROD_TYPESENSE_DATA_DIR=${{ secrets.PROD_TYPESENSE_DATA_DIR }}
            PROD_TYPESENSE_HOST=typesense
            PROD_TYPESENSE_PORT=8108
            CONFIG
          EOF

      - name: Deploy containers
        run: |
          ssh $SSH_OPTS -i ~/.ssh/id_ed25519 deploy@${{ secrets.HETZNER_SERVER_IP }} <<'EOF'
            set -euxo pipefail
            cd $PROJECT_DIR
            
            # Stop old containers
            docker-compose -f $COMPOSE_FILE down --remove-orphans --timeout 30 || true
            
            # Build fresh
            docker-compose -f $COMPOSE_FILE build --no-cache --pull
            
            # Start with Let's Encrypt handling
            if [ -d "data/certbot/conf/live" ]; then
              docker-compose -f $COMPOSE_FILE run --rm certbot renew --dry-run
            fi
            docker-compose -f $COMPOSE_FILE up -d --force-recreate
          EOF

      # === VERIFICATION ===
      - name: Verify deployment
        run: |
          ssh $SSH_OPTS -i ~/.ssh/id_ed25519 deploy@${{ secrets.HETZNER_SERVER_IP }} <<'EOF'
            set -euo pipefail
            cd $PROJECT_DIR
            
            # Container check
            if [ $(docker-compose -f $COMPOSE_FILE ps -q | wc -l) -lt 3 ]; then
              docker-compose -f $COMPOSE_FILE logs
              exit 1
            fi
            
            # Health checks with timeout
            check_service() {
              local url=$1
              if ! curl -fsS --max-time 5 --retry 3 "$url"; then
                echo "Health check failed for $url"
                return 1
              fi
            }
            
            check_service "http://localhost:${{ secrets.PROD_BACKEND_PORT }}/health"
            check_service "http://localhost:${{ secrets.PROD_FRONTEND_PORT }}/health"
          EOF

      # === CLEANUP ===
      - name: System cleanup
        if: always()
        run: |
          ssh $SSH_OPTS -i ~/.ssh/id_ed25519 deploy@${{ secrets.HETZNER_SERVER_IP }} <<'EOF' || echo "Cleanup completed"
            docker system prune -af --volumes --filter "until=24h"
          EOF
