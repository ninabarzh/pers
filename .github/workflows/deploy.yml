# .github/workflows/deploy.yml
name: Deploy to Production (Hetzner)

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure SSH access
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.HETZNER_SSH_KEY }}

      - name: Transfer files to server
        run: |
          rsync -rlptDzv \
            --delete \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='.env*' \
            --exclude='node_modules' \
            --exclude='app_data' \
            --exclude='nginx/config/dhparam' \
            -e "ssh -o StrictHostKeyChecking=no" \
            "$GITHUB_WORKSPACE/" \
            "deploy@${{ secrets.HETZNER_SERVER_IP }}:/home/deploy/app/"

      - name: Verify NGINX build files
        run: |
          ssh -T deploy@${{ secrets.HETZNER_SERVER_IP }} << 'EOT'
          set -ex
          cd /home/deploy/app/nginx
          
          echo "=== NGINX build files ==="
          ls -la
          echo "=== Dockerfile contents ==="
          cat Dockerfile.prod || echo "No Dockerfile.prod found"
          echo "=== NGINX config ==="
          cat nginx.prod.conf || echo "No nginx.prod.conf found"
          echo "=== Snippets directory ==="
          ls -la snippets/
          EOT

      - name: Handle DH params
        run: |
          ssh -T -o StrictHostKeyChecking=no deploy@${{ secrets.HETZNER_SERVER_IP }} << 'EOT'
          set -e
          cd /home/deploy/app
          
          # Create directory if it doesn't exist
          sudo mkdir -p nginx/config/dhparam
          sudo chown deploy:docker nginx/config/dhparam
          
          # Generate DH params if missing
          if [ ! -f "nginx/config/dhparam/dhparam.pem" ]; then
            sudo openssl dhparam -out nginx/config/dhparam/dhparam.pem 2048
            sudo chown deploy:docker nginx/config/dhparam/dhparam.pem
          fi
          
          # Set proper permissions
          sudo chmod 644 nginx/config/dhparam/dhparam.pem
          EOT

      - name: Create and secure .env file
        run: |
          ssh -T -o StrictHostKeyChecking=no deploy@${{ secrets.HETZNER_SERVER_IP }} << 'EOT'
          set -e
          cd /home/deploy/app

          cat <<EOF > .env
          DOMAIN=${{ secrets.PROD_DOMAIN }}
          DEBUG=false
          ENV=production
          EMAIL=${{ secrets.PROD_EMAIL }}

          TYPESENSE_API_KEY=${{ secrets.PROD_TYPESENSE_API_KEY }}
          TYPESENSE_HOST=typesense
          TYPESENSE_PORT=8108
          TYPESENSE_PROTOCOL=http
          TYPESENSE_DATA_DIR=/home/deploy/app_data/typesense

          BACKEND_PORT=8000
          FRONTEND_PORT=8001

          BACKEND_STARTUP_DELAY=30
          EOF

          chmod 640 .env
          chown deploy:docker .env
          EOT

      - name: Set up directories and permissions
        run: |
          ssh -T -o StrictHostKeyChecking=no deploy@${{ secrets.HETZNER_SERVER_IP }} << 'EOT'
          set -e
          cd /home/deploy/app

          sudo mkdir -p /home/deploy/app_data/{typesense,static,certbot/conf/live}
          sudo mkdir -p /home/deploy/app/nginx/config/dhparam
          sudo chown -R deploy:docker /home/deploy/app_data
          sudo chmod -R 775 /home/deploy/app_data

          if [ ! -f "/home/deploy/app/nginx/config/dhparam/dhparam.pem" ]; then
            sudo openssl dhparam -out /home/deploy/app/nginx/config/dhparam/dhparam.pem 2048
            sudo chown deploy:docker /home/deploy/app/nginx/config/dhparam/dhparam.pem
          fi
          EOT

      - name: Ensure nginx directories exist
        run: |
          ssh -T -o StrictHostKeyChecking=no deploy@${{ secrets.HETZNER_SERVER_IP }} << 'EOT'
          set -e
          sudo mkdir -p /home/deploy/app/nginx/{config/dhparam,snippets}
          sudo chown -R deploy:docker /home/deploy/app/nginx
          EOT

      - name: Deploy services with proper dependency handling
        run: |
          ssh -T -o StrictHostKeyChecking=no deploy@${{ secrets.HETZNER_SERVER_IP }} << 'EOT'
          set -ex  # Enable debugging and exit on error
          cd /home/deploy/app
          
          # Clean up and rebuild everything
          docker compose -f docker-compose.prod.yml down -v --remove-orphans
          docker compose -f docker-compose.prod.yml build --no-cache
          
          # Start services in order with health checks
          docker compose -f docker-compose.prod.yml up -d typesense
          for i in {1..10}; do
            if docker compose -f docker-compose.prod.yml exec typesense curl -sf http://localhost:8108/health; then
              echo "Typesense ready"
              break
            fi
            sleep 10
          done
          
          docker compose -f docker-compose.prod.yml up -d backend
          for i in {1..15}; do
            if docker compose -f docker-compose.prod.yml exec backend curl -sf http://localhost:8000/health; then
              echo "Backend ready"
              break
            fi
            sleep 10
          done
          
          # Start frontend with explicit build
          docker compose -f docker-compose.prod.yml up -d --build frontend
          
          # Finally start nginx
          docker compose -f docker-compose.prod.yml up -d nginx
          
          # Verify all services
          docker compose -f docker-compose.prod.yml ps -a
          EOT

      - name: Set up SSL certificates
        run: |
          ssh -T -o StrictHostKeyChecking=no deploy@${{ secrets.HETZNER_SERVER_IP }} << 'EOT'
          set -ex
          cd /home/deploy/app
          
          # Stop any running nginx
          docker compose -f docker-compose.prod.yml stop nginx || true
          
          # Run certbot in standalone mode temporarily
          docker run --rm -p 80:80 \
            -v /home/deploy/app_data/certbot/conf:/etc/letsencrypt \
            -v /home/deploy/app_data/certbot/www:/var/www/certbot \
            certbot/certbot certonly \
            --standalone \
            --non-interactive \
            --agree-tos \
            --email ${{ secrets.PROD_EMAIL }} \
            -d ${{ secrets.PROD_DOMAIN }} \
            -d www.${{ secrets.PROD_DOMAIN }} \
            --preferred-challenges http
          
          # Restart everything
          docker compose -f docker-compose.prod.yml up -d
          EOT

      - name: Verify deployment
        run: |
          ssh -T -o StrictHostKeyChecking=no deploy@${{ secrets.HETZNER_SERVER_IP }} << 'EOT'
          cd /home/deploy/app
          
          echo "=== Service Status ==="
          docker compose -f docker-compose.prod.yml ps -a
          
          echo "\n=== Health Checks ==="
          echo "Typesense:" $(docker compose -f docker-compose.prod.yml exec typesense curl -sf http://localhost:8108/health || echo "unreachable")
          echo "Backend:" $(docker compose -f docker-compose.prod.yml exec backend curl -sf http://localhost:8000/health || echo "unreachable")
          
          echo "\n=== HTTPS Test ==="
          curl -Isk https://${{ secrets.PROD_DOMAIN }} | head -n 5
          EOT

      - name: Prune unused Docker objects
        run: |
          ssh -T deploy@${{ secrets.HETZNER_SERVER_IP }} << 'EOT'
          docker system prune -af --volumes
          EOT
