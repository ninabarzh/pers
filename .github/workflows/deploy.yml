# .github/workflows/deploy.yml
name: Deploy to Production (Hetzner)

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      # ======================
      # STAGE 1: PREPARATION
      # ======================
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure SSH access
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.HETZNER_SSH_KEY }}

      # ======================
      # STAGE 2: FILE TRANSFER
      # ======================
      - name: Transfer files to server
        run: |
          rsync -avz --delete \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='.env*' \
            --exclude='node_modules' \
            -e "ssh -o StrictHostKeyChecking=no" \
            "$GITHUB_WORKSPACE/" \
            "deploy@${{ secrets.HETZNER_SERVER_IP }}:~/app/"

      # ======================
      # STAGE 3: SERVER SETUP
      # ======================
      - name: Configure production environment
        run: |
          ssh -T -o StrictHostKeyChecking=no deploy@${{ secrets.HETZNER_SERVER_IP }} << 'EOT'
          cd ~/app

          # =========================================
          # PHASE 1: ENVIRONMENT CONFIGURATION
          # =========================================
          cat <<EOF > .env
          TYPESENSE_API_KEY=${{ secrets.PROD_TYPESENSE_API_KEY }}
          TYPESENSE_DATA_DIR=/data/typesense
          TYPESENSE_HOST=typesense
          TYPESENSE_PORT=8108
          TYPESENSE_PROTOCOL=http
          DOMAIN=${{ secrets.PROD_DOMAIN }}
          PROD_BACKEND_PORT=${{ secrets.PROD_BACKEND_PORT }}
          PROD_FRONTEND_PORT=${{ secrets.PROD_FRONTEND_PORT }}
          BACKEND_STARTUP_DELAY=15
          EOF
          chmod 600 .env

          # =========================================
          # PHASE 2: INFRASTRUCTURE SETUP
          # =========================================
          mkdir -p /data/typesense
          chown -R 1001:docker /data/typesense
          chmod -R 770 /data/typesense

          # Generate DH params in background if missing
          mkdir -p nginx/config/dhparam
          [ ! -f nginx/config/dhparam/dhparam.pem ] && \
            openssl dhparam -out nginx/config/dhparam/dhparam.pem 2048 &

          # =========================================
          # PHASE 3: SERVICES DEPLOYMENT
          # =========================================
          # Build and start Typesense first
          docker compose -f docker-compose.prod.yml build typesense
          docker compose -f docker-compose.prod.yml up -d typesense

          # Wait for Typesense with health check
          for i in {1..30}; do
            if docker compose -f docker-compose.prod.yml exec typesense \
              curl -sf http://localhost:8108/health; then
              echo "Typesense ready after $i attempts"
              break
            fi
            sleep 5
            [ $i -eq 15 ] && docker compose -f docker-compose.prod.yml restart typesense
          done

          # Initialize Typesense collection if needed
          if ! docker compose -f docker-compose.prod.yml exec typesense \
            curl -sf -H "X-TYPESENSE-API-KEY: ${{ secrets.PROD_TYPESENSE_API_KEY }}" \
            http://localhost:8108/collections/ossfinder; then
            echo "Initializing Typesense collection..."
            docker compose -f docker-compose.prod.yml exec backend \
              ./init-typesense.sh || echo "Collection initialization completed"
          fi

          # Start backend with extended health check
          docker compose -f docker-compose.prod.yml stop backend || true
          docker compose -f docker-compose.prod.yml rm -f backend || true
          docker compose -f docker-compose.prod.yml up -d --build backend

          # Wait for backend to be healthy
          for i in {1..20}; do
            if docker compose -f docker-compose.prod.yml exec backend \
              curl -sf http://localhost:${{ secrets.PROD_BACKEND_PORT }}/health; then
              echo "Backend ready after $i attempts"
              break
            fi
            sleep 5
            [ $i -eq 10 ] && docker compose -f docker-compose.prod.yml restart backend
          done

          # =========================================
          # PHASE 4: SSL & NGINX SETUP
          # =========================================
          # Stop nginx if running
          docker compose -f docker-compose.prod.yml stop nginx || true

          # Renew or create certificates
          if [ ! -d "data/certbot/conf/live/${{ secrets.PROD_DOMAIN }}" ]; then
            echo "Initializing SSL certificates..."
            ./init-letsencrypt.sh
          else
            echo "Renewing SSL certificates..."
            docker compose -f docker-compose.prod.yml run --rm certbot renew --force-renewal
          fi

          # Start nginx with retry logic
          for i in {1..5}; do
            echo "Starting nginx (attempt $i/5)..."
            docker compose -f docker-compose.prod.yml up -d nginx
            sleep 5
            
            if docker compose -f docker-compose.prod.yml ps | grep -q "nginx.*Up"; then
              echo "Nginx started successfully"
              break
            fi
            
            if [ $i -eq 5 ]; then
              echo "Nginx failed to start after 5 attempts"
              docker compose -f docker-compose.prod.yml logs nginx
              exit 1
            fi
          done

          # Verify nginx configuration
          docker compose -f docker-compose.prod.yml exec nginx nginx -t
          docker compose -f docker-compose.prod.yml exec nginx nginx -s reload
          EOT
        timeout-minutes: 30

      # ======================
      # STAGE 4: VERIFICATION
      # ======================
      - name: Validate deployment
        run: |
          ssh -T -o StrictHostKeyChecking=no deploy@${{ secrets.HETZNER_SERVER_IP }} << 'EOT'
          cd ~/app
          
          echo "=== Full Container Status ==="
          docker compose -f docker-compose.prod.yml ps -a
          
          echo "\n=== Nginx Configuration Test ==="
          docker compose -f docker-compose.prod.yml exec nginx nginx -t
          
          echo "\n=== SSL Certificate Verification ==="
          docker compose -f docker-compose.prod.yml exec nginx ls -la /etc/letsencrypt/live/${{ secrets.PROD_DOMAIN }}/
          docker compose -f docker-compose.prod.yml exec nginx cat /etc/letsencrypt/live/${{ secrets.PROD_DOMAIN }}/fullchain.pem | openssl x509 -noout -dates
          
          echo "\n=== Nginx Error Log ==="
          docker compose -f docker-compose.prod.yml exec nginx tail -n 20 /var/log/nginx/error.log || true
          
          echo "\n=== Service Health Checks ==="
          echo "Typesense:" $(docker compose -f docker-compose.prod.yml exec typesense curl -s http://localhost:8108/health)
          echo "Backend:" $(docker compose -f docker-compose.prod.yml exec backend curl -s http://localhost:${{ secrets.PROD_BACKEND_PORT }}/health)
          
          echo "\n=== HTTPS Test ==="
          if ! curl -Isk --retry 3 --retry-delay 5 https://${{ secrets.PROD_DOMAIN }} | grep -E 'HTTP|Location'; then
            echo "HTTPS test failed, checking:"
            echo "1. HTTP response:"
            curl -Isk http://${{ secrets.PROD_DOMAIN }} || true
            echo "2. Direct Nginx test:"
            docker compose -f docker-compose.prod.yml exec nginx curl -Is http://localhost || true
            echo "3. Port check:"
            docker compose -f docker-compose.prod.yml exec nginx netstat -tulnp | grep -E '80|443' || true
            exit 1
          fi
          
          echo "\n=== Deployment Success ==="
          EOT

