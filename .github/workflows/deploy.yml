# .github/workflows/deploy.yml
name: Deploy to Production

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags (e.g., v1.0.0)
    branches:
      - main      # Optional: Add if you want branch-based deploys

env:
  DOCKER_COMPOSE_VERSION: '1.29.2'
  COMPOSE_FILE: 'docker-compose.yml:docker-compose.prod.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
      packages: write
      deployments: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Install Docker Compose
      run: |
        curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose

    - name: Create production .env file
      run: |
        cat <<EOF > .env.prod
        # Production Environment
        ENV=production
        DEBUG=false

        # Typesense Configuration
        PROD_TYPESENSE_API_KEY=${{ secrets.PROD_TYPESENSE_API_KEY }}
        PROD_TYPESENSE_HOST=${{ secrets.PROD_TYPESENSE_HOST }}
        PROD_TYPESENSE_PORT=${{ secrets.PROD_TYPESENSE_PORT }}
        PROD_TYPESENSE_PROTOCOL=${{ secrets.PROD_TYPESENSE_PROTOCOL }}
        PROD_TYPESENSE_DATA_DIR=${{ secrets.PROD_TYPESENSE_DATA_DIR }}

        # Application Ports
        PROD_BACKEND_PORT=${{ secrets.PROD_BACKEND_PORT }}
        PROD_FRONTEND_PORT=${{ secrets.PROD_FRONTEND_PORT }}

        # Domain Configuration
        DOMAIN=${{ secrets.PROD_DOMAIN }}
        BACKEND_URL=https://${{ secrets.PROD_DOMAIN }}/api
        EOF

    - name: Build and push Docker images
      run: |
        docker-compose -f $COMPOSE_FILE build --no-cache
        docker-compose -f $COMPOSE_FILE push

    - name: Deploy to Hetzner
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HETZNER_SERVER_IP }}
        username: ${{ secrets.HETZNER_USER }}
        key: ${{ secrets.HETZNER_SSH_KEY }}
        fingerprint: ${{ secrets.HETZNER_SERVER_FINGERPRINT }}
        script: |
          #!/bin/bash
          set -e
          
          # Create required directories
          sudo mkdir -p /data/static /data/typesense
          sudo chown -R 1000:1000 /data
          
          # Pull latest images
          docker-compose -f $COMPOSE_FILE pull
          
          # Stop and remove old containers
          docker-compose -f $COMPOSE_FILE down --remove-orphans
          
          # Deploy new version
          docker-compose -f $COMPOSE_FILE up -d --force-recreate
          
          # Clean up unused images
          docker image prune -af

    - name: Verify deployment
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HETZNER_SERVER_IP }}
        username: ${{ secrets.HETZNER_USER }}
        key: ${{ secrets.HETZNER_SSH_KEY }}
        script: |
          #!/bin/bash
          set -e
          
          # Check containers are running
          docker ps --format "table {{.Names}}\t{{.Status}}"
          
          # Verify backend health
          curl -sSf https://${{ secrets.PROD_DOMAIN }}/health
          
          # Verify frontend health
          curl -sSf https://${{ secrets.PROD_DOMAIN }}:8001/health
