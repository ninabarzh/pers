# .github/workflows/deploy.yml
name: Deploy to Production (Hetzner)

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      # ======================
      # STAGE 1: PREPARATION
      # ======================
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.HETZNER_SSH_KEY }}

      # ======================
      # STAGE 2: FILE TRANSFER
      # ======================
      - name: Transfer files to server
        run: |
          rsync -avz --delete \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='.env*' \
            --exclude='node_modules' \
            -e "ssh -o StrictHostKeyChecking=no" \
            . deploy@${{ secrets.HETZNER_SERVER_IP }}:~/app/

      # ======================
      # STAGE 3: SERVER SETUP
      # ======================
      - name: Configure production environment
        run: |
          ssh -T -o StrictHostKeyChecking=no deploy@${{ secrets.HETZNER_SERVER_IP }} << 'EOT'
          cd ~/app

          # Create .env with ALL required variables
          cat <<EOF > .env
          TYPESENSE_API_KEY=${{ secrets.PROD_TYPESENSE_API_KEY }}
          TYPESENSE_DATA_DIR=/data/typesense
          TYPESENSE_HOST=typesense
          TYPESENSE_PORT=8108
          TYPESENSE_PROTOCOL=http
          DOMAIN=${{ secrets.PROD_DOMAIN }}
          PROD_BACKEND_PORT=${{ secrets.PROD_BACKEND_PORT }}
          PROD_FRONTEND_PORT=${{ secrets.PROD_FRONTEND_PORT }}
          BACKEND_STARTUP_DELAY=15
          EOF
          chmod 600 .env

          # Ensure backend container gets the environment
          docker compose -f docker-compose.prod.yml stop backend || true
          docker compose -f docker-compose.prod.yml rm -f backend || true

          # Rebuild with proper environment
          docker compose -f docker-compose.prod.yml build backend
          docker compose -f docker-compose.prod.yml up -d backend

          # Verify backend can access Typesense
          if ! docker compose -f docker-compose.prod.yml exec backend \
            curl -sf -H "X-TYPESENSE-API-KEY: ${{ secrets.PROD_TYPESENSE_API_KEY }}" \
            http://typesense:8108/health; then
            echo "Backend cannot connect to Typesense"
            exit 1
          fi

          # Force SSL certificate renewal if connection fails
          docker compose -f docker-compose.prod.yml stop nginx || true
          docker compose -f docker-compose.prod.yml run --rm certbot renew --force-renewal
          docker compose -f docker-compose.prod.yml up -d nginx

          # Verify SSL certificate
          if ! docker compose -f docker-compose.prod.yml exec nginx \
            test -f /etc/letsencrypt/live/${{ secrets.PROD_DOMAIN }}/fullchain.pem; then
            echo "SSL certificate missing, initializing..."
            ./init-letsencrypt.sh
          fi
          EOT

      # ======================
      # STAGE 4: VERIFICATION
      # ======================
      - name: Verify deployment
        run: |
          ssh -T -o StrictHostKeyChecking=no deploy@${{ secrets.HETZNER_SERVER_IP }} << 'EOT'
          cd ~/app
          
          echo "=== SSL Certificate Check ==="
          docker compose -f docker-compose.prod.yml exec nginx ls -la /etc/letsencrypt/live/${{ secrets.PROD_DOMAIN }}/
          
          echo "\n=== Nginx SSL Configuration ==="
          docker compose -f docker-compose.prod.yml exec nginx nginx -T | grep ssl_certificate
          
          echo "\n=== Final HTTPS Test ==="
          curl -Isk --retry 3 --retry-delay 5 https://${{ secrets.PROD_DOMAIN }} | grep -E 'HTTP|Location' || {
            echo "HTTPS failed, checking HTTP:"
            curl -Is http://${{ secrets.PROD_DOMAIN }}
            exit 1
          }
          EOT