# .github/workflows/deploy.yml
name: Deploy to Production (Hetzner)

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      # ======================
      # STAGE 1: PREPARATION
      # ======================
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.HETZNER_SSH_KEY }}

      # ======================
      # STAGE 2: FILE TRANSFER
      # ======================
      - name: Transfer files to server
        run: |
          rsync -avz --delete \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='.env*' \
            --exclude='node_modules' \
            -e "ssh -o StrictHostKeyChecking=no" \
            . deploy@${{ secrets.HETZNER_SERVER_IP }}:~/app/

      # ======================
      # STAGE 3: SERVER SETUP
      # ======================
      - name: Configure production environment
        run: |
          ssh -T -o StrictHostKeyChecking=no deploy@${{ secrets.HETZNER_SERVER_IP }} << 'EOT'
          cd ~/app
          
          # Create production .env without sudo
          cat <<EOF > .env
          TYPESENSE_API_KEY=${{ secrets.PROD_TYPESENSE_API_KEY }}
          TYPESENSE_DATA_DIR=/data/typesense
          TYPESENSE_HOST=typesense
          TYPESENSE_PORT=8108
          TYPESENSE_PROTOCOL=http
          DOMAIN=${{ secrets.PROD_DOMAIN }}
          PROD_BACKEND_PORT=${{ secrets.PROD_BACKEND_PORT }}
          PROD_FRONTEND_PORT=${{ secrets.PROD_FRONTEND_PORT }}
          BACKEND_STARTUP_DELAY=15
          EOF
          chmod 600 .env

          # Create data directory with docker group permissions
          mkdir -p /data/typesense
          chown -R 1001:docker /data/typesense
          chmod -R 770 /data/typesense

          # Build and start Typesense first
          docker compose -f docker-compose.prod.yml build typesense
          docker compose -f docker-compose.prod.yml up -d typesense

          # Wait for Typesense with health check
          for i in {1..30}; do
            if docker compose -f docker-compose.prod.yml exec typesense \
              curl -sf http://localhost:8108/health; then
              echo "Typesense ready!"
              break
            fi
            sleep 5
          done

          # Initialize collection if needed
          if ! docker compose -f docker-compose.prod.yml exec typesense \
            curl -sf -H "X-TYPESENSE-API-KEY: ${{ secrets.PROD_TYPESENSE_API_KEY }}" \
            http://localhost:8108/collections/ossfinder; then
            docker compose -f docker-compose.prod.yml exec backend \
              ./init-typesense.sh || echo "Collection initialization completed"
          fi

          # Start backend with health check
          docker compose -f docker-compose.prod.yml up -d --build backend
          for i in {1..20}; do
            if docker compose -f docker-compose.prod.yml exec backend \
              curl -sf http://localhost:${{ secrets.PROD_BACKEND_PORT }}/health; then
              echo "Backend ready"
              break
            fi
            sleep 5
          done

          # Complete deployment
          docker compose -f docker-compose.prod.yml up -d --build

          # SSL setup (non-sudo)
          if [ ! -d "data/certbot/conf/live/${{ secrets.PROD_DOMAIN }}" ]; then
            docker compose -f docker-compose.prod.yml run --rm certbot certonly \
              --webroot -w /var/www/certbot \
              --email nina@tymyrddin.dev --agree-tos --non-interactive \
              -d ${{ secrets.PROD_DOMAIN }} -d www.${{ secrets.PROD_DOMAIN }}
          else
            docker compose -f docker-compose.prod.yml run --rm certbot renew
          fi

          # Final nginx reload
          docker compose -f docker-compose.prod.yml exec nginx nginx -s reload
          EOT
        timeout-minutes: 30

      # ======================
      # STAGE 4: VERIFICATION
      # ======================
      - name: Verify deployment
        run: |
          ssh -T -o StrictHostKeyChecking=no deploy@${{ secrets.HETZNER_SERVER_IP }} << 'EOT'
          cd ~/app
          echo "=== Container Status ==="
          docker compose -f docker-compose.prod.yml ps -a
          echo "\n=== HTTPS Test ==="
          curl -Isk https://${{ secrets.PROD_DOMAIN }} | grep -E 'HTTP|Location'
          EOT
