# .github/workflows/deploy.yml
name: Deploy to Hetzner

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Prepare for build
      run: |
        # Create backup of original requirements files
        cp backend/requirements.txt backend/requirements.original.txt
        cp frontend/requirements.txt frontend/requirements.original.txt
        
        # Create clean versions without hashes
        sed '/--hash=/d' backend/requirements.original.txt > backend/requirements.txt
        sed '/--hash=/d' frontend/requirements.original.txt > frontend/requirements.txt

    - name: Install Docker Compose
      run: |
        curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-linux-$(uname -m)" -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose

    - name: Verify file structure
      run: |
        ls -la
        ls -la backend/
        ls -la frontend/

    - name: Generate production .env
      run: |
        cat <<EOF > .env.prod
        ENV=production
        DEBUG=false
        PROD_TYPESENSE_API_KEY=${{ secrets.PROD_TYPESENSE_API_KEY }}
        PROD_TYPESENSE_HOST=${{ secrets.PROD_TYPESENSE_HOST }}
        PROD_TYPESENSE_PORT=${{ secrets.PROD_TYPESENSE_PORT }}
        PROD_TYPESENSE_PROTOCOL=${{ secrets.PROD_TYPESENSE_PROTOCOL }}
        PROD_TYPESENSE_DATA_DIR=${{ secrets.PROD_TYPESENSE_DATA_DIR }}
        PROD_BACKEND_PORT=${{ secrets.PROD_BACKEND_PORT }}
        PROD_FRONTEND_PORT=${{ secrets.PROD_FRONTEND_PORT }}
        DOMAIN=${{ secrets.PROD_DOMAIN }}
        EOF

    - name: Build images
      run: |
        # Load environment variables for build
        export TYPESENSE_API_KEY=${{ secrets.PROD_TYPESENSE_API_KEY }}
        export TYPESENSE_HOST=${{ secrets.PROD_TYPESENSE_HOST }}
        export TYPESENSE_PORT=${{ secrets.PROD_TYPESENSE_PORT }}
        export BACKEND_PORT=${{ secrets.PROD_BACKEND_PORT }}
        export FRONTEND_PORT=${{ secrets.PROD_FRONTEND_PORT }}
        
        # Build with clean requirements files
        docker-compose -f docker-compose.yml -f docker-compose.prod.yml build --no-cache

    - name: Restore requirements files
      run: |
        mv backend/requirements.original.txt backend/requirements.txt
        mv frontend/requirements.original.txt frontend/requirements.txt

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.HETZNER_SSH_KEY }}

    - name: Deploy to Hetzner
      run: |
        rsync -avz --delete \
              -e "ssh -o StrictHostKeyChecking=no" \
              . ${{ secrets.HETZNER_USER }}@${{ secrets.HETZNER_SERVER_IP }}:~/app/

        ssh -o StrictHostKeyChecking=no \
            ${{ secrets.HETZNER_USER }}@${{ secrets.HETZNER_SERVER_IP }} \
            "cd ~/app && \
             docker-compose -f docker-compose.yml -f docker-compose.prod.yml down && \
             docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --build --force-recreate && \
             docker system prune -af --volumes"

    - name: Verify deployment
      run: |
        ssh -o StrictHostKeyChecking=no \
            ${{ secrets.HETZNER_USER }}@${{ secrets.HETZNER_SERVER_IP }} \
            "echo '--- Running Containers ---' && \
             docker ps -a && \
             echo '--- Backend Health ---' && \
             curl -fsS http://localhost:${{ secrets.PROD_BACKEND_PORT }}/health && \
             echo '--- Frontend Health ---' && \
             curl -fsS http://localhost:${{ secrets.PROD_FRONTEND_PORT }}/health && \
             echo '--- Nginx Health ---' && \
             curl -fsS https://${{ secrets.PROD_DOMAIN }}/health"