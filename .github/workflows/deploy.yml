# .github/workflows/deploy.yml
name: Deploy to Production (Hetzner)

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure SSH access
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.HETZNER_SSH_KEY }}

      - name: Transfer files to server
        run: |
          rsync -avz --delete \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='.env*' \
            --exclude='node_modules' \
            -e "ssh -o StrictHostKeyChecking=no" \
            "$GITHUB_WORKSPACE/" \
            "deploy@${{ secrets.HETZNER_SERVER_IP }}:~/app/"

      - name: Configure production environment
        run: |
          ssh -T -o StrictHostKeyChecking=no deploy@${{ secrets.HETZNER_SERVER_IP }} << 'EOT'
          set -e
          cd ~/app

          # Environment configuration
          cat <<EOF > .env
          TYPESENSE_API_KEY=${{ secrets.PROD_TYPESENSE_API_KEY }}
          TYPESENSE_DATA_DIR=/data/typesense
          TYPESENSE_HOST=typesense
          TYPESENSE_PORT=8108
          TYPESENSE_PROTOCOL=http
          DOMAIN=${{ secrets.PROD_DOMAIN }}
          PROD_BACKEND_PORT=8000
          PROD_FRONTEND_PORT=8001
          BACKEND_STARTUP_DELAY=30
          EOF
          chmod 600 .env

          # Infrastructure setup
          mkdir -p /data/typesense /data/static nginx/config/dhparam
          chown -R 1001:docker /data/typesense
          chmod -R 770 /data/typesense

          # Generate DH params if missing
          if [ ! -f nginx/config/dhparam/dhparam.pem ]; then
            openssl dhparam -out nginx/config/dhparam/dhparam.pem 2048
          fi

          # Clean up any existing containers
          docker compose -f docker-compose.prod.yml down || true

          # Start Typesense first
          docker compose -f docker-compose.prod.yml up -d --build typesense

          # Wait for Typesense with extended timeout
          echo "Waiting for Typesense to be ready..."
          for i in {1..30}; do
            if docker compose -f docker-compose.prod.yml exec typesense \
              curl -sf http://localhost:8108/health; then
              echo "Typesense ready after $i attempts"
              break
            fi
            sleep 5
            [ $i -eq 30 ] && echo "Typesense failed to start" && exit 1
          done

          # Initialize Typesense collection if needed
          echo "Checking Typesense collection..."
          if ! docker compose -f docker-compose.prod.yml exec typesense \
            curl -sf -H "X-TYPESENSE-API-KEY: ${{ secrets.PROD_TYPESENSE_API_KEY }}" \
            http://localhost:8108/collections/ossfinder; then
            echo "Initializing Typesense collection..."
            docker compose -f docker-compose.prod.yml exec backend \
              ./init-typesense.sh || echo "Collection initialization completed"
          fi

          # Start backend with longer startup delay
          echo "Starting backend..."
          docker compose -f docker-compose.prod.yml up -d --build backend

          # Extended wait for backend
          echo "Waiting for backend to be healthy..."
          for i in {1..30}; do
            if docker compose -f docker-compose.prod.yml exec backend \
              curl -sf http://localhost:8000/health; then
              echo "Backend ready after $i attempts"
              break
            fi
            sleep 5
            [ $i -eq 30 ] && echo "Backend failed to start" && exit 1
          done

          # Start frontend
          echo "Starting frontend..."
          docker compose -f docker-compose.prod.yml up -d --build frontend

          # SSL certificate setup
          echo "Setting up SSL certificates..."
          mkdir -p data/certbot/{conf,www}

          if [ ! -d "data/certbot/conf/live/${{ secrets.PROD_DOMAIN }}" ]; then
            echo "Initial certificate setup..."
            # Start temporary nginx for certbot
            docker compose -f docker-compose.prod.yml up -d nginx
            sleep 10
            
            # Get certificates
            docker compose -f docker-compose.prod.yml run --rm certbot certonly \
              --webroot -w /var/www/certbot \
              --email nina@tymyrddin.dev --agree-tos --non-interactive \
              -d ${{ secrets.PROD_DOMAIN }} -d www.${{ secrets.PROD_DOMAIN }} || \
              echo "Certificate setup may have failed - continuing"
          else
            echo "Renewing existing certificates..."
            docker compose -f docker-compose.prod.yml run --rm certbot renew
          fi

          # Full restart of all services
          echo "Restarting all services..."
          docker compose -f docker-compose.prod.yml down
          docker compose -f docker-compose.prod.yml up -d

          # Verify nginx
          echo "Verifying nginx..."
          for i in {1..10}; do
            if docker compose -f docker-compose.prod.yml exec nginx nginx -t; then
              docker compose -f docker-compose.prod.yml exec nginx nginx -s reload
              break
            fi
            sleep 5
            [ $i -eq 10 ] && echo "Nginx configuration test failed" && exit 1
          done

          echo "Deployment completed successfully"
          EOT

      - name: Validate deployment
        run: |
          ssh -T -o StrictHostKeyChecking=no deploy@${{ secrets.HETZNER_SERVER_IP }} << 'EOT'
          cd ~/app
          
          echo "=== Container Status ==="
          docker compose -f docker-compose.prod.yml ps -a
          
          echo "\n=== Service Health Checks ==="
          echo "Typesense:" $(docker compose -f docker-compose.prod.yml exec typesense curl -s http://localhost:8108/health || echo "unreachable")
          echo "Backend:" $(docker compose -f docker-compose.prod.yml exec backend curl -s http://localhost:8000/health || echo "unreachable")
          echo "Frontend:" $(docker compose -f docker-compose.prod.yml exec frontend curl -s http://localhost:8001/health || echo "unreachable")
          
          echo "\n=== Nginx Status ==="
          docker compose -f docker-compose.prod.yml exec nginx nginx -t
          docker compose -f docker-compose.prod.yml exec nginx curl -Is http://localhost
          
          echo "\n=== SSL Verification ==="
          docker compose -f docker-compose.prod.yml exec nginx ls -la /etc/letsencrypt/live/${{ secrets.PROD_DOMAIN }}/
          
          echo "\n=== Deployment Verification ==="
          curl -Isk https://${{ secrets.PROD_DOMAIN }} | grep -E 'HTTP|Location' || \
            (echo "HTTPS test failed" && exit 1)
          
          echo "\n=== Deployment Successful ==="
          EOT
