# .github/workflows/deploy.yml
name: Deploy to Production (Hetzner)

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      # ======================
      # STAGE 1: PREPARATION
      # ======================
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history for version tracking

      - name: Configure SSH access
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.HETZNER_SSH_KEY }}

      # ======================
      # STAGE 2: FILE TRANSFER
      # ======================
      - name: Sync code to server
        run: |
          rsync -avz --delete \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='.env' \          # Never overwrite existing .env
            --exclude='node_modules' \
            -e "ssh -o StrictHostKeyChecking=no" \
            . deploy@${{ secrets.HETZNER_SERVER_IP }}:~/app/

      # ======================
      # STAGE 3: SERVER SETUP
      # ======================
      - name: Configure production environment
        run: |
          ssh -T -o StrictHostKeyChecking=no deploy@${{ secrets.HETZNER_SERVER_IP }} << 'EOT'
          cd ~/app

          # =========================================
          # PHASE 1: ENVIRONMENT CONFIGURATION
          # =========================================
          # Create production environment file
          cat <<EOF > .env
          # ---- Core Services ----
          TYPESENSE_API_KEY=${{ secrets.PROD_TYPESENSE_API_KEY }}
          TYPESENSE_DATA_DIR=/data/typesense
          TYPESENSE_HOST=typesense
          TYPESENSE_PORT=8108
          TYPESENSE_PROTOCOL=http

          # ---- Network Configuration ----
          PROD_DOMAIN=${{ secrets.PROD_DOMAIN }}
          PROD_BACKEND_PORT=${{ secrets.PROD_BACKEND_PORT }}
          PROD_FRONTEND_PORT=${{ secrets.PROD_FRONTEND_PORT }}

          # ---- Application Paths ----
          PROD_BACKEND_PYTHONPATH=/app/src
          PROD_FRONTEND_PYTHONPATH=/app/src
          EOF

          # Secure environment file
          chmod 600 .env  # Restrict to owner only

          # =========================================
          # PHASE 2: INFRASTRUCTURE PREREQUISITES
          # =========================================
          # Ensure data directory exists with correct permissions
          sudo mkdir -p /data/typesense
          sudo chown -R 1001:root /data/typesense  # Typesense runs as UID 1001
          sudo chmod -R 770 /data/typesense

          # Generate DH parameters in background (takes ~5-10 mins)
          mkdir -p nginx/config/dhparam
          if [ ! -f nginx/config/dhparam/dhparam.pem ]; then
            openssl dhparam -out nginx/config/dhparam/dhparam.pem 2048 &
          fi

          # =========================================
          # PHASE 3: SERVICE DEPLOYMENT
          # =========================================
          # Start Typesense first (has longest startup time)
          docker compose -f docker-compose.prod.yml up -d --build typesense

          # Wait for Typesense with progressive backoff
          echo "Waiting for Typesense to initialize..."
          for i in {1..30}; do
            if docker compose -f docker-compose.prod.yml exec typesense \
              curl -sf http://localhost:8108/health; then
              echo "Typesense ready after $i attempts"
              break
            fi
            
            # Exponential backoff: 5s, 10s, 15s, etc.
            sleep $((i*5))
            
            # After 10 attempts, try restarting
            if [ $i -eq 10 ]; then
              docker compose -f docker-compose.prod.yml restart typesense
            fi
            
            # Fail after 30 attempts (â‰ˆ7.5 minutes)
            if [ $i -eq 30 ]; then
              echo "Typesense failed to start"
              docker compose -f docker-compose.prod.yml logs typesense
              exit 1
            fi
          done

          # Initialize search collection if missing
          if ! docker compose -f docker-compose.prod.yml exec typesense \
            curl -sf -H "X-TYPESENSE-API-KEY: ${{ secrets.PROD_TYPESENSE_API_KEY }}" \
            http://localhost:8108/collections/ossfinder; then
            echo "Initializing search collection..."
            docker compose -f docker-compose.prod.yml exec backend \
              ./init-typesense.sh
          fi

          # =========================================
          # PHASE 4: SSL CERTIFICATES
          # =========================================
          # First-time certificate setup
          if [ ! -d "data/certbot/conf/live/${{ secrets.PROD_DOMAIN }}" ]; then
            ./init-letsencrypt.sh
          else
            # Renew existing certificates
            docker compose -f docker-compose.prod.yml run --rm certbot renew
          fi

          # =========================================
          # PHASE 5: FINAL DEPLOYMENT
          # =========================================
          # Start all services with production config
          docker compose -f docker-compose.prod.yml up -d --build

          # Ensure nginx reloads with new config
          docker compose -f docker-compose.prod.yml exec nginx nginx -s reload

          # Wait for DH param generation if still running
          if pgrep openssl; then
            echo "Waiting for DH parameter generation..."
            wait
            docker compose -f docker-compose.prod.yml restart nginx
          fi
          EOT
        timeout-minutes: 30

      # ======================
      # STAGE 4: VERIFICATION
      # ======================
      - name: Validate deployment
        run: |
          ssh -T -o StrictHostKeyChecking=no deploy@${{ secrets.HETZNER_SERVER_IP }} << 'EOT'
          cd ~/app
          
          echo "=== Service Status ==="
          docker compose -f docker-compose.prod.yml ps -a
          
          echo "\n=== Typesense Health ==="
          curl -H "X-TYPESENSE-API-KEY: ${{ secrets.PROD_TYPESENSE_API_KEY }}" \
            http://localhost:8108/health || true
          
          echo "\n=== SSL Certificate Validity ==="
          docker compose -f docker-compose.prod.yml exec nginx \
            openssl x509 -noout -dates -in /etc/letsencrypt/live/${{ secrets.PROD_DOMAIN }}/cert.pem
          
          echo "\n=== HTTP/2 Check ==="
          curl -Isk --http2 https://${{ secrets.PROD_DOMAIN }} | grep -E 'HTTP|location'
          EOT
