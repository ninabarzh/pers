# .github/workflows/deploy.yml
name: Deploy to Production (Hetzner)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
    # ======================
    # SETUP PHASE
    # ======================
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    - name: Install Docker Compose
      run: |
        mkdir -p ~/.docker/cli-plugins/
        curl -SL https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-linux-x86_64 \
          -o ~/.docker/cli-plugins/docker-compose
        chmod +x ~/.docker/cli-plugins/docker-compose

    # ======================
    # BUILD PHASE
    # ======================
    - name: Generate production .env
      run: |
        cat <<EOF > .env.prod
        ENV=production
        DEBUG=false
        TYPESENSE_API_KEY=${{ secrets.PROD_TYPESENSE_API_KEY }}
        TYPESENSE_HOST=typesense
        TYPESENSE_PORT=8108
        TYPESENSE_PROTOCOL=http
        TYPESENSE_DATA_DIR=/data/typesense
        BACKEND_PORT=8000
        FRONTEND_PORT=8001
        DOMAIN=${{ secrets.PROD_DOMAIN }}
        EOF

    - name: Build production images
      env:
        TYPESENSE_API_KEY: ${{ secrets.PROD_TYPESENSE_API_KEY }}
        DOMAIN: ${{ secrets.PROD_DOMAIN }}
      run: |
        docker compose -f docker-compose.prod.yml build

    # ======================
    # DEPLOYMENT PHASE
    # ======================
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.HETZNER_SSH_KEY }}

    - name: Transfer files to server
      run: |
        rsync -avz --delete \
          --exclude='.git' \
          --exclude='.github' \
          -e "ssh -o StrictHostKeyChecking=no" \
          . deploy@${{ secrets.HETZNER_SERVER_IP }}:~/app/

    - name: Initialize certificates
      run: |
        ssh -o StrictHostKeyChecking=no deploy@${{ secrets.HETZNER_SERVER_IP }} << 'EOF'
        cd ~/app
        
        # Create .env file for compose
        cat <<EOL > .env
        TYPESENSE_API_KEY=$TYPESENSE_API_KEY
        TYPESENSE_DATA_DIR=/data/typesense
        TYPESENSE_HOST=typesense
        TYPESENSE_PORT=8108
        TYPESENSE_PROTOCOL=http
        DOMAIN=$DOMAIN
        EOL
        
        # Generate DH params in background if missing
        mkdir -p nginx/config/dhparam
        if [ ! -f nginx/config/dhparam/dhparam.pem ]; then
          openssl dhparam -out nginx/config/dhparam/dhparam.pem 2048 & # Use 2048 for faster generation
        fi
        
        # Start only nginx for certbot
        docker compose -f docker-compose.prod.yml up -d nginx
        
        # Get certificates
        docker compose -f docker-compose.prod.yml run --rm certbot \
          certbot certonly --webroot -w /var/www/certbot \
          --email nina@tymyrddin.dev --agree-tos --non-interactive \
          -d $DOMAIN -d www.$DOMAIN
        
        # Full deployment
        docker compose -f docker-compose.prod.yml up -d --build
        EOF
      env:
        TYPESENSE_API_KEY: ${{ secrets.PROD_TYPESENSE_API_KEY }}
        DOMAIN: ${{ secrets.PROD_DOMAIN }}
      timeout-minutes: 15

    # ======================
    # VERIFICATION PHASE
    # ======================
    - name: Verify deployment
      run: |
        ssh -o StrictHostKeyChecking=no deploy@${{ secrets.HETZNER_SERVER_IP }} << 'EOF'
        cd ~/app
        echo "=== Running Containers ==="
        docker compose -f docker-compose.prod.yml ps
        
        echo "\n=== SSL Certificate ==="
        docker compose -f docker-compose.prod.yml exec nginx \
          openssl x509 -noout -text -in /etc/letsencrypt/live/$DOMAIN/cert.pem | grep -E 'Issuer:|Not Before:|Not After:|DNS:'
        
        echo "\n=== HTTPS Test ==="
        curl -I https://$DOMAIN
        EOF
      env:
        DOMAIN: ${{ secrets.PROD_DOMAIN }}
