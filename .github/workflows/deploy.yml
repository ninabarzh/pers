# .github/workflows/deploy.yml
name: Deploy to Production

on:
  push:
    branches: [main]

env:
  PROJECT_DIR: /opt/pers
  COMPOSE_FILE: docker-compose.prod.yml

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # === SSH SETUP ===
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.HETZNER_SERVER_IP }} ${{ secrets.HETZNER_SERVER_FINGERPRINT }}" > ~/.ssh/known_hosts
          echo "${{ secrets.HETZNER_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

      # === DEPLOY CODE ===
      - name: Rsync code to server
        run: |
          rsync -avz --delete \
            -e "ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes" \
            --exclude=".git" \
            --exclude=".github" \
            --exclude="node_modules" \
            --exclude=".env" \
            --exclude="data" \
            --exclude="*.pyc" \
            --exclude="__pycache__" \
            ./ deploy@${{ secrets.HETZNER_SERVER_IP }}:${{ env.PROJECT_DIR }}/

      # === SERVER SETUP ===
      - name: Initialize server
        run: |
          ssh -i ~/.ssh/id_ed25519 deploy@${{ secrets.HETZNER_SERVER_IP }} <<'EOF'
            set -euxo pipefail
            cd ${{ env.PROJECT_DIR }}
            
            mkdir -p data/{typesense,certbot/{conf,www}} nginx/snippets
            chmod -R 755 data
            
            umask 077
            cat > .env <<'CONFIG'
            # Backend
            PROD_BACKEND_PORT=${{ secrets.PROD_BACKEND_PORT }}
            BACKEND_PORT=${{ secrets.PROD_BACKEND_PORT }}
            PROD_BACKEND_PYTHONPATH=${{ secrets.PROD_BACKEND_PYTHONPATH }}
            
            # Frontend
            PROD_FRONTEND_PORT=${{ secrets.PROD_FRONTEND_PORT }}
            PROD_FRONTEND_PYTHONPATH=${{ secrets.PROD_FRONTEND_PYTHONPATH }}
            
            # Typesense
            PROD_TYPESENSE_API_KEY=${{ secrets.PROD_TYPESENSE_API_KEY }}
            PROD_TYPESENSE_DATA_DIR=/data
            TYPESENSE_DATA_DIR=/data
            PROD_TYPESENSE_HOST=typesense
            PROD_TYPESENSE_PORT=${{ secrets.PROD_TYPESENSE_PORT }}
            TYPESENSE_PORT=${{ secrets.PROD_TYPESENSE_PORT }}
            
            # Domain
            DOMAIN=${{ secrets.PROD_DOMAIN }}
            CONFIG
          EOF

      # === DEPLOY SERVICES ===
      - name: Start containers
        run: |
          ssh -i ~/.ssh/id_ed25519 deploy@${{ secrets.HETZNER_SERVER_IP }} <<'EOF'
            set -euxo pipefail
            cd ${{ env.PROJECT_DIR }}
            
            # Start with build to ensure permissions are correct
            docker compose -f ${{ env.COMPOSE_FILE }} build backend
            
            # Start services with longer waits
            docker compose -f ${{ env.COMPOSE_FILE }} up -d typesense
            sleep 30  # Increased from 20
            
            docker compose -f ${{ env.COMPOSE_FILE }} up -d backend
            sleep 60  # Increased from 30
            
            # More detailed health check
            if ! docker compose -f ${{ env.COMPOSE_FILE }} ps backend | grep -q "(healthy)"; then
              echo "Backend logs:"
              docker compose -f ${{ env.COMPOSE_FILE }} logs backend
              echo "Trying direct healthcheck:"
              curl -v http://localhost:${{ secrets.PROD_BACKEND_PORT }}/health || true
              exit 1
            fi
          EOF

      # === VERIFICATION ===
      - name: Verify deployment
        run: |
          ssh -i ~/.ssh/id_ed25519 deploy@${{ secrets.HETZNER_SERVER_IP }} <<'EOF'
            set -euo pipefail
            cd ${{ env.PROJECT_DIR }} || exit 1
            
            if [ $(docker compose -f ${{ env.COMPOSE_FILE }} ps -q | wc -l) -lt 3 ]; then
              docker compose -f ${{ env.COMPOSE_FILE }} logs
              exit 1
            fi
            
            check_health() {
              if ! curl -fsS --max-time 5 "http://localhost:$1/health"; then
                echo "Health check failed for port $1"
                exit 1
              fi
            }
            
            check_health ${{ secrets.PROD_BACKEND_PORT }}
            check_health ${{ secrets.PROD_FRONTEND_PORT }}
          EOF

      # === CLEANUP ===
      # Removes __pycache__ directories
      # Deletes compiled .pyc files
      # Handles log rotation (adjusts ./logs to log location)
      # Cleans old static files (30+ days)
      # Runs inside the backend container
      # Removes old snapshots (7+ days)
      # Maintains search performance
      # All commands include error handling (|| true)
      # Clear section headers in output
      # Final resource summary
      - name: Cleanup resources
        if: ${{ always() }}
        run: |
          ssh -i ~/.ssh/id_ed25519 deploy@${{ secrets.HETZNER_SERVER_IP }} <<'EOF'
            set -euo pipefail
            echo "=== Starting Cleanup ==="
            
            # Skip pruning if no containers exist
            if [ $(docker ps -q | wc -l) -gt 0 ]; then
              docker system prune -af || echo "Docker cleanup completed with warnings"
            fi
            
            cd ${{ env.PROJECT_DIR }}
            find . \( -name "__pycache__" -o -name "*.pyc" \) -delete || true
            
            # Only try to clean containers if they're running
            if docker compose ps backend | grep -q "Up"; then
              docker compose exec -T backend find /app/static -type f -mtime +30 -delete || true
            fi
            
            if docker compose ps typesense | grep -q "Up"; then
              docker compose exec -T typesense find /data -name "*.snapshot" -mtime +7 -delete || true
            fi
            
            echo "=== Cleanup Completed ==="
            docker system df
          EOF
