# .github/workflows/deploy.yml
name: Deploy to Production (Hetzner)

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure SSH access
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.HETZNER_SSH_KEY }}

      - name: Transfer files to server
        run: |
          rsync -avz --delete \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='.env*' \
            --exclude='node_modules' \
            -e "ssh -o StrictHostKeyChecking=no" \
            "$GITHUB_WORKSPACE/" \
            "deploy@${{ secrets.HETZNER_SERVER_IP }}:/home/deploy/app/"

      - name: Create and secure .env file
        run: |
          ssh -T -o StrictHostKeyChecking=no deploy@${{ secrets.HETZNER_SERVER_IP }} << 'EOT'
          set -e
          cd /home/deploy/app

          # Create .env file with secrets
          cat <<EOF > .env
          # Application Configuration
          DOMAIN=${{ secrets.PROD_DOMAIN }}
          DEBUG=false
          ENV=production
          EMAIL=${{ secrets.PROD_EMAIL }}

          # Typesense Configuration
          TYPESENSE_API_KEY=${{ secrets.PROD_TYPESENSE_API_KEY }}
          TYPESENSE_HOST=typesense
          TYPESENSE_PORT=8108
          TYPESENSE_PROTOCOL=http
          TYPESENSE_DATA_DIR=/home/deploy/app_data/typesense

          # Port Configuration
          PROD_BACKEND_PORT=8000
          PROD_FRONTEND_PORT=8001

          # Startup Settings
          BACKEND_STARTUP_DELAY=30
          EOF

          # Set secure permissions
          chmod 640 .env
          chown deploy:docker .env
          EOT

      - name: Set up directories and permissions
        run: |
          ssh -T -o StrictHostKeyChecking=no deploy@${{ secrets.HETZNER_SERVER_IP }} << 'EOT'
          set -e
          cd /home/deploy/app

          # Create required directories
          sudo mkdir -p /home/deploy/app_data/{typesense,static,certbot}
          sudo mkdir -p /home/deploy/app/nginx/config/dhparam
          sudo mkdir -p /data/static

          # Set ownership and permissions
          sudo chown -R deploy:docker /home/deploy/app_data
          sudo chmod -R 775 /home/deploy/app_data
          sudo chown -R deploy:docker /home/deploy/app/nginx
          sudo chmod -R 775 /home/deploy/app/nginx
          sudo chown -R deploy:docker /data/static
          sudo chmod -R 775 /data/static

          # Generate DH params if missing
          if [ ! -f "/home/deploy/app/nginx/config/dhparam/dhparam.pem" ]; then
            sudo openssl dhparam -out /home/deploy/app/nginx/config/dhparam/dhparam.pem 2048
            sudo chown deploy:docker /home/deploy/app/nginx/config/dhparam/dhparam.pem
          fi
          EOT

      - name: Initial deployment without certbot
        run: |
          ssh -T -o StrictHostKeyChecking=no deploy@${{ secrets.HETZNER_SERVER_IP }} << 'EOT'
          set -e
          cd /home/deploy/app

          # Clean up old containers
          docker compose -f docker-compose.prod.yml down -v || true

          # Start services without certbot
          docker compose -f docker-compose.prod.yml up -d --build nginx typesense backend frontend

          # Wait for backend to be healthy
          echo "Waiting for backend to become healthy..."
          for i in {1..30}; do
            if docker compose -f docker-compose.prod.yml exec backend curl -sf http://localhost:8000/health; then
              echo "Backend is healthy"
              break
            fi
            sleep 5
            echo "Attempt $i: Backend not ready yet..."
          done
          EOT

      - name: Set up SSL certificates
        run: |
          ssh -T -o StrictHostKeyChecking=no deploy@${{ secrets.HETZNER_SERVER_IP }} << 'EOT'
          set -e
          cd /home/deploy/app

          # Stop nginx temporarily
          docker compose -f docker-compose.prod.yml stop nginx

          # Get SSL certificates
          docker compose -f docker-compose.prod.yml run --rm certbot certonly \
            --webroot --webroot-path /var/www/certbot \
            --email $EMAIL --agree-tos --no-eff-email \
            -d $DOMAIN -d www.$DOMAIN --force-renewal

          # Start all services
          docker compose -f docker-compose.prod.yml up -d
          EOT

      - name: Verify deployment
        run: |
          ssh -T -o StrictHostKeyChecking=no deploy@${{ secrets.HETZNER_SERVER_IP }} << 'EOT'
          cd /home/deploy/app
          
          echo "=== Service Status ==="
          docker compose -f docker-compose.prod.yml ps -a
          
          echo "\n=== Health Checks ==="
          echo "Typesense:" $(docker compose -f docker-compose.prod.yml exec typesense curl -sf http://localhost:8108/health || echo "unreachable")
          echo "Backend:" $(docker compose -f docker-compose.prod.yml exec backend curl -sf http://localhost:8000/health || echo "unreachable")
          
          echo "\n=== HTTPS Test ==="
          curl -Isk https://${{ secrets.PROD_DOMAIN }} | head -n 5
          EOT
