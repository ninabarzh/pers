# .github/workflows/deploy.yml
name: Deploy to Production (Hetzner)

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      # ======================
      # STAGE 1: PREPARATION
      # ======================
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure SSH access
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.HETZNER_SSH_KEY }}

      # ======================
      # STAGE 2: FILE TRANSFER
      # ======================
      - name: Transfer files to server
        run: |
          rsync -avz --delete \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='.env*' \
            --exclude='node_modules' \
            -e "ssh -o StrictHostKeyChecking=no" \
            "$GITHUB_WORKSPACE/" \
            "deploy@${{ secrets.HETZNER_SERVER_IP }}:~/app/"

      # ======================
      # STAGE 3: SERVER SETUP
      # ======================
      - name: Configure production environment
        run: |
          ssh -T -o StrictHostKeyChecking=no deploy@${{ secrets.HETZNER_SERVER_IP }} << 'EOT'
          cd ~/app

          # =========================================
          # PHASE 1: ENVIRONMENT CONFIGURATION
          # =========================================
          cat <<EOF > .env
          TYPESENSE_API_KEY=${{ secrets.PROD_TYPESENSE_API_KEY }}
          TYPESENSE_DATA_DIR=/data/typesense
          TYPESENSE_HOST=typesense
          TYPESENSE_PORT=8108
          TYPESENSE_PROTOCOL=http
          DOMAIN=${{ secrets.PROD_DOMAIN }}
          PROD_BACKEND_PORT=${{ secrets.PROD_BACKEND_PORT }}
          PROD_FRONTEND_PORT=${{ secrets.PROD_FRONTEND_PORT }}
          EOF
          chmod 600 .env

          # =========================================
          # PHASE 2: TYPESENSE INITIALIZATION
          # =========================================
          sudo mkdir -p /data/typesense
          sudo chown -R 1001:root /data/typesense
          sudo chmod -R 770 /data/typesense

          # Start Typesense with explicit command
          docker compose -f docker-compose.prod.yml run -d \
            --service-ports \
            --name typesense_init \
            typesense \
            sh -c "mkdir -p /data/typesense && \
            /usr/bin/typesense-server \
            --data-dir=/data/typesense \
            --api-key=${{ secrets.PROD_TYPESENSE_API_KEY }} \
            --listen-port=8108 \
            --enable-cors \
            --max-memory-ratio=0.8"

          # Wait with health checks
          for i in {1..30}; do
            if docker exec typesense_init curl -sf http://localhost:8108/health; then
              docker stop typesense_init
              docker rm typesense_init
              break
            fi
            sleep 5
            [ $i -eq 15 ] && docker restart typesense_init
          done

          # Verify initialization
          if ! docker compose -f docker-compose.prod.yml exec typesense \
            curl -sf -H "X-TYPESENSE-API-KEY: ${{ secrets.PROD_TYPESENSE_API_KEY }}" \
            http://localhost:8108/collections/ossfinder; then
            docker compose -f docker-compose.prod.yml exec backend \
              ./init-typesense.sh
          fi

          # =========================================
          # PHASE 3: SERVICE DEPLOYMENT
          # =========================================
          docker compose -f docker-compose.prod.yml up -d --build

          # =========================================
          # PHASE 4: SSL SETUP
          # =========================================
          if [ ! -d "data/certbot/conf/live/${{ secrets.PROD_DOMAIN }}" ]; then
            ./init-letsencrypt.sh
          else
            docker compose -f docker-compose.prod.yml run --rm certbot renew
          fi

          # Final nginx reload
          docker compose -f docker-compose.prod.yml exec nginx nginx -s reload
          EOT
        timeout-minutes: 30

      # ======================
      # STAGE 4: VERIFICATION
      # ======================
      - name: Validate deployment
        run: |
          ssh -T -o StrictHostKeyChecking=no deploy@${{ secrets.HETZNER_SERVER_IP }} << 'EOT'
          cd ~/app
          echo "=== Service Status ==="
          docker compose -f docker-compose.prod.yml ps -a
          echo "\n=== HTTPS Check ==="
          curl -Isk https://${{ secrets.PROD_DOMAIN }} | grep -E 'HTTP|Location'
          EOT
