# .github/workflows/deploy.yml
name: Deploy to Production (Hetzner)

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure SSH access
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.HETZNER_SSH_KEY }}

      - name: Transfer files to server
        run: |
          rsync -avz --delete \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='.env*' \
            --exclude='node_modules' \
            -e "ssh -o StrictHostKeyChecking=no" \
            "$GITHUB_WORKSPACE/" \
            "deploy@${{ secrets.HETZNER_SERVER_IP }}:/home/deploy/app/"

      - name: Create and secure .env file
        run: |
          ssh -T -o StrictHostKeyChecking=no deploy@${{ secrets.HETZNER_SERVER_IP }} << 'EOT'
          set -e
          cd /home/deploy/app

          # Create .env file with secrets
          cat <<EOF > .env
          # Application Configuration
          DOMAIN=${{ secrets.PROD_DOMAIN }}
          DEBUG=false
          ENV=production
          EMAIL=${{ secrets.PROD_EMAIL }}

          # Typesense Configuration
          TYPESENSE_API_KEY=${{ secrets.PROD_TYPESENSE_API_KEY }}
          TYPESENSE_HOST=typesense
          TYPESENSE_PORT=8108
          TYPESENSE_PROTOCOL=http
          TYPESENSE_DATA_DIR=/home/deploy/app_data/typesense

          # Port Configuration
          PROD_BACKEND_PORT=8000
          PROD_FRONTEND_PORT=8001

          # Startup Settings
          BACKEND_STARTUP_DELAY=30
          EOF

          # Set secure permissions
          chmod 640 .env
          chown deploy:docker .env
          EOT

      - name: Set up directories and permissions
        run: |
          ssh -T -o StrictHostKeyChecking=no deploy@${{ secrets.HETZNER_SERVER_IP }} << 'EOT'
          set -e
          cd /home/deploy/app

          # Create required directories
          sudo mkdir -p /home/deploy/app_data/{typesense,static,certbot}
          sudo mkdir -p /home/deploy/app/nginx/config/dhparam
          sudo mkdir -p /data/static

          # Set ownership and permissions
          sudo chown -R deploy:docker /home/deploy/app_data
          sudo chmod -R 775 /home/deploy/app_data
          sudo chown -R deploy:docker /home/deploy/app/nginx
          sudo chmod -R 775 /home/deploy/app/nginx
          sudo chown -R deploy:docker /data/static
          sudo chmod -R 775 /data/static

          # Generate DH params if missing
          if [ ! -f "/home/deploy/app/nginx/config/dhparam/dhparam.pem" ]; then
            sudo openssl dhparam -out /home/deploy/app/nginx/config/dhparam/dhparam.pem 2048
            sudo chown deploy:docker /home/deploy/app/nginx/config/dhparam/dhparam.pem
          fi
          EOT

      - name: Initial deployment without certbot
        run: |
          ssh -T -o StrictHostKeyChecking=no deploy@${{ secrets.HETZNER_SERVER_IP }} << 'EOT'
          set -e
          cd /home/deploy/app
      
          # Clean up previous deployment
          docker compose -f docker-compose.prod.yml down -v || true
          
          # Set proper permissions
          sudo chmod 640 /home/deploy/app/.env
          sudo chown deploy:docker /home/deploy/app/.env
          
          # Start Typesense first (with health check)
          echo "Starting Typesense..."
          docker compose -f docker-compose.prod.yml up -d --build typesense
          
          # Wait for Typesense to become healthy
          echo "Waiting for Typesense to become healthy..."
          timeout 300s bash -c 'until docker compose -f docker-compose.prod.yml exec typesense curl -sf http://localhost:8108/health; do
            sleep 5
            echo "Waiting for Typesense..."
          done'
          
          # Start backend
          echo "Starting Backend..."
          docker compose -f docker-compose.prod.yml up -d --build backend

          # Wait for backend to become healthy
          echo "Waiting for backend to become healthy..."
          timeout 300s bash -c 'until docker compose -f docker-compose.prod.yml exec backend curl -sf http://localhost:8000/health; do
            sleep 5
            echo "Waiting for backend..."
          done'

          # Start all remaining services
          echo "Starting all services..."
          docker compose -f docker-compose.prod.yml up -d --build
          
          # Verify all services are up
          echo "=== Deployment Status ==="
          docker compose -f docker-compose.prod.yml ps
          EOT

      - name: Set up SSL certificates
        run: |
          ssh -T -o StrictHostKeyChecking=no deploy@${{ secrets.HETZNER_SERVER_IP }} << 'EOT'
          set -ex
          cd /home/deploy/app
        
          # Ensure docker socket is accessible
          sudo chown root:docker /var/run/docker.sock
          sudo chmod 660 /var/run/docker.sock
        
          # Clean up previous runs
          docker compose -f docker-compose.prod.yml stop nginx certbot || true
          docker compose -f docker-compose.prod.yml rm -f nginx certbot || true
        
          # Ensure certificate directories exist
          sudo mkdir -p /home/deploy/app_data/certbot/{www,conf}/live
          sudo chown -R deploy:docker /home/deploy/app_data/certbot
          sudo chmod -R 775 /home/deploy/app_data/certbot
        
          # Free port 80
          sudo lsof -ti :80 | xargs -r sudo kill -9 || true
        
          # Obtain certificates with retry logic
          for i in {1..3}; do
            if docker compose -f docker-compose.prod.yml run --rm --service-ports certbot \
              certonly \
              --standalone \
              --non-interactive \
              --agree-tos \
              --email ${{ secrets.PROD_EMAIL }} \
              -d ${{ secrets.PROD_DOMAIN }} \
              -d www.${{ secrets.PROD_DOMAIN }} \
              --preferred-challenges http \
              --http-01-port 80; then
              break
            fi
            sleep $((i*10))
          done
        
          # Verify certificates were obtained
          if [ ! -f "/home/deploy/app_data/certbot/conf/live/${{ secrets.PROD_DOMAIN }}/fullchain.pem" ]; then
            echo "❌ Certificate files not found!"
            exit 1
          fi
        
          # Restart services with proper permissions
          sudo chown -R deploy:docker /home/deploy/app_data
          docker compose -f docker-compose.prod.yml up -d --force-recreate
        
          # Verify nginx configuration
          if ! docker compose -f docker-compose.prod.yml exec nginx nginx -t; then
            echo "❌ Nginx configuration test failed!"
            docker compose -f docker-compose.prod.yml logs nginx
            exit 1
          fi
        
          # Verify HTTPS access
          if ! curl -IfsSk --retry 3 --retry-delay 5 "https://${{ secrets.PROD_DOMAIN }}" >/dev/null; then
            echo "❌ HTTPS connection failed!"
            docker compose -f docker-compose.prod.yml logs nginx
            exit 1
          fi
        
          echo "✅ SSL setup completed successfully"
          EOT

      - name: Verify deployment
        run: |
          ssh -T -o StrictHostKeyChecking=no deploy@${{ secrets.HETZNER_SERVER_IP }} << 'EOT'
          cd /home/deploy/app
          
          echo "=== Service Status ==="
          docker compose -f docker-compose.prod.yml ps -a
          
          echo "\n=== Health Checks ==="
          echo "Typesense:" $(docker compose -f docker-compose.prod.yml exec typesense curl -sf http://localhost:8108/health || echo "unreachable")
          echo "Backend:" $(docker compose -f docker-compose.prod.yml exec backend curl -sf http://localhost:8000/health || echo "unreachable")
          
          echo "\n=== HTTPS Test ==="
          curl -Isk https://${{ secrets.PROD_DOMAIN }} | head -n 5
          EOT
