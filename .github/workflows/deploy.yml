# .github/workflows/deploy.yml
name: Deploy to Hetzner

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.HETZNER_SERVER_FINGERPRINT }}" >> ~/.ssh/known_hosts

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.HETZNER_SSH_KEY }}

      - name: Deploy to Hetzner
        run: |
          rsync -avz --delete \
            --exclude=".git" \
            --exclude="node_modules" \
            ./ deploy@${{ secrets.HETZNER_SERVER_IP }}:/opt/pers/

      - name: Prepare Server Environment
        run: |
          ssh deploy@${{ secrets.HETZNER_SERVER_IP }} << 'ENDSSH'
            cd /opt/pers
            mkdir -p data/typesense nginx/snippets
            chmod -R 755 data
          ENDSSH

      - name: Initialize Services
        run: |
          ssh deploy@${{ secrets.HETZNER_SERVER_IP }} << 'ENDSSH'
            cd /opt/pers
            
            # Build containers first
            docker-compose build
            
            # Prepare static files
            docker-compose run --rm frontend sh -c "mkdir -p /var/www/static && cp -r /app/src/app/static/* /var/www/static/"
            
            # Set environment variables
            export TYPESENSE_API_KEY=${{ secrets.PROD_TYPESENSE_API_KEY }}
            export TYPESENSE_DATA_DIR=${{ secrets.PROD_TYPESENSE_DATA_DIR }}
            export TYPESENSE_HOST=${{ secrets.PROD_TYPESENSE_HOST }}
            export TYPESENSE_PORT=${{ secrets.PROD_TYPESENSE_PORT }}
            export BACKEND_PORT=${{ secrets.PROD_BACKEND_PORT }}
            export FRONTEND_PORT=${{ secrets.PROD_FRONTEND_PORT }}
            export BACKEND_PYTHONPATH=${{ secrets.PROD_BACKEND_PYTHONPATH }}
            export FRONTEND_PYTHONPATH=${{ secrets.PROD_FRONTEND_PYTHONPATH }}
            export TYPESENSE_PROTOCOL=${{ secrets.PROD_TYPESENSE_PROTOCOL }}
            
            # Initialize Let's Encrypt if needed
            if [ ! -d "letsencrypt-live" ]; then
              chmod +x init-letsencrypt.sh
              ./init-letsencrypt.sh
            fi
            
            # Start services
            docker-compose up -d
          ENDSSH