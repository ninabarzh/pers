# frontend/Dockerfile.prod
# Stage 1: Builder
FROM python:3.12-slim as builder

WORKDIR /app

# Install build dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    gcc python3-dev brotli gzip && \
    rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Generate and verify hashes (optional security step)
RUN pip freeze | pip hash --algorithm sha256 > installed_hashes.txt && \
    grep -q -f <(cut -d'=' -f1 requirements.txt) installed_hashes.txt

# Copy and process static files
COPY . .
RUN find src/app/static/ -type f \( -name "*.css" -o -name "*.js" \) \
    -exec gzip -9 -k {} \; \
    -exec brotli -9 -k {} \;

# Stage 2: Runtime
FROM python:3.12-slim

WORKDIR /app

# Install runtime dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    brotli && \
    rm -rf /var/lib/apt/lists/*

# Copy virtual environment
COPY --from=builder /opt/venv /opt/venv

# Copy application code
COPY --from=builder --chown=1000:1000 /app/src/ ./src/
RUN chmod -R 555 ./src  # Read+execute only

# Static files setup
RUN mkdir -p /var/www/static && \
    cp -r src/app/static/* /var/www/static/ && \
    chmod -R 755 /var/www/static

# Non-root user
RUN useradd -u 1000 -m myuser -d /app && \
    chown -R myuser:myuser /app /var/www/static

# Environment configuration
ENV PATH="/opt/venv/bin:$PATH" \
    PYTHONPATH="/app/src" \
    PYTHONUNBUFFERED="1"

USER myuser

HEALTHCHECK --interval=30s --timeout=10s \
    CMD curl -f http://localhost:8001/health || exit 1

CMD ["sh", "-c", \
    "python -c \"import os; assert os.getenv('ENV') == 'production', 'Production environment required'; \
    from src.app.main import config; print('Configuration loaded:', config)\" && \
    uvicorn src.app.main:app --host 0.0.0.0 --port 8001 --no-access-log"]
