# docker-compose.yml
services:
  # Typesense service (used in both dev and prod)
  typesense:
    build:
      context: .
      dockerfile: backend/Dockerfile.typesense
    container_name: typesense-db
    ports:
      - "${TYPESENSE_PORT}:8108"
    environment:
      - TYPESENSE_API_KEY=${PROD_TYPESENSE_API_KEY}
      - TYPESENSE_DATA_DIR=${PROD_TYPESENSE_DATA_DIR}
    volumes:
      - typesense_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8108/health"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    networks:
      - app-network

  # Backend service (used in both dev and prod)
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: backend-app
    ports:
      - "${BACKEND_PORT}:8000"
    volumes:
      - ./backend/src:/app/src  # Bind mount for development
    environment:
      - PYTHONPATH=${PROD_BACKEND_PYTHONPATH}
      - TYPESENSE_HOST=${PROD_TYPESENSE_HOST}
      - TYPESENSE_PORT=${PROD_TYPESENSE_PORT}
      - TYPESENSE_API_KEY=${PROD_TYPESENSE_API_KEY}
      - BACKEND_PORT=${PROD_BACKEND_PORT}
      - TYPESENSE_PROTOCOL=${PROD_TYPESENSE_PROTOCOL:-http}  # Default to http if not set
    depends_on:
      typesense:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:$${BACKEND_PORT:-8000}/health || exit 1"]
      interval: 30s
      timeout: 30s  # Increased from 10s
      retries: 5    # Increased from 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - app-network

  # Frontend service (used in both dev and prod)
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    container_name: frontend-app
    ports:
      - "${FRONTEND_PORT:-8001}:8001"
    volumes:
      - ./frontend/src:/app/src  # Bind mount for development
    environment:
      - PYTHONPATH=${PROD_FRONTEND_PYTHONPATH}
      - FRONTEND_PORT=${PROD_FRONTEND_PORT}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 10s
      timeout: 5s
      retries: 10
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - app-network

  nginx:
    image: nginx:latest
    profiles: ["production"]
    container_name: nginx-proxy
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/snippets:/etc/nginx/snippets
      - static_volume:/var/www/static
      - certbot_www:/var/www/certbot
      - certbot_conf:/etc/letsencrypt
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
      certbot:
        condition: service_started
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  certbot:
    image: certbot/certbot
    profiles: ["production"]
    container_name: certbot
    volumes:
      - certbot_www:/var/www/certbot
      - certbot_conf:/etc/letsencrypt
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew --post-hook \"nginx -s reload\"; sleep 12h & wait $${!}; done;'"
    depends_on:
      nginx:
        condition: service_started
    networks:
      - app-network
    restart: unless-stopped

  # Backend tests (development only)
  backend-tests:
    profiles: ["development"]
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: backend-tests
    depends_on:
      backend:
        condition: service_healthy
      typesense:
        condition: service_healthy
    volumes:
      - ./backend/src:/app/src
      - ./backend/tests:/app/tests
    env_file:
      - .env
    environment:
      - TEST_ENV=development
      - DEBUG=true
    command: ["./run_tests.sh"]
    networks:
      - app-network

  # Frontend tests (development only)
  frontend-tests:
    profiles: ["development"]
    build:
      context: .
      dockerfile: frontend/Dockerfile
    container_name: frontend-tests
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/tests:/app/tests
    env_file:
      - .env
    environment:
      - PYTHONPATH=${PROD_FRONTEND_PYTHONPATH:-/app/src}
      - FRONTEND_PORT=${PROD_FRONTEND_PORT:-8001}
    command: ["./run_tests.sh"]
    networks:
      - app-network

volumes:
  typesense_data:
  static_volume:
  certbot_www:
  certbot_conf:

networks:
  app-network:
    driver: bridge