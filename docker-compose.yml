# docker-compose.yml
services:
  # Typesense service (used in both dev and prod)
  typesense:
    build:
      context: .
      dockerfile: backend/Dockerfile.typesense
    env_file:
      - .env.dev  # Development environment variables
      - .env.prod # Production environment variables (overrides .env.dev)
    container_name: typesense-db
    ports:
      - "${TYPESENSE_PORT}:8108"
    environment:
      - TYPESENSE_API_KEY=${TYPESENSE_API_KEY}
      - TYPESENSE_DATA_DIR=${TYPESENSE_DATA_DIR}
    volumes:
      - typesense_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8108/health"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    networks:
      - app-network

  # Backend service (used in both dev and prod)
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    env_file:
      - .env.dev  # Development environment variables
      - .env.prod # Production environment variables (overrides .env.dev)
    container_name: backend-app
    ports:
      - "${BACKEND_PORT}:8000"
    volumes:
      - ./backend/src:/app/src  # Bind mount for development
    environment:
      - PYTHONPATH=${BACKEND_PYTHONPATH}
      - TYPESENSE_HOST=typesense
      - TYPESENSE_PORT=8108
      - TYPESENSE_PROTOCOL=http
      - TYPESENSE_API_KEY=${TYPESENSE_API_KEY}
    depends_on:
      typesense:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

  # Frontend service (used in both dev and prod)
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    env_file:
      - .env.dev  # Development environment variables
      - .env.prod # Production environment variables (overrides .env.dev)
    container_name: frontend-app
    ports:
      - "${FRONTEND_PORT}:8001"
    volumes:
      - ./frontend/src:/app/src  # Bind mount for development
    environment:
      - PYTHONPATH=${FRONTEND_PYTHONPATH}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 10s
      timeout: 5s
      retries: 10
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - app-network

  # Nginx reverse proxy (production only)
  nginx:
    profiles: ["production"]
    image: nginx:latest
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf  # Mount Nginx configuration
      - /etc/letsencrypt/live/finder.green/fullchain.pem:/etc/nginx/certs/fullchain.pem  # Mount SSL certificate
      - /etc/letsencrypt/live/finder.green/privkey.pem:/etc/nginx/certs/privkey.pem  # Mount SSL private key
    depends_on:
      - backend
      - frontend
    networks:
      - app-network

  # Backend tests (development only)
  backend-tests:
    profiles: ["development"]
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: backend-tests
    depends_on:
      backend:
        condition: service_healthy
      typesense:
        condition: service_healthy
    volumes:
      - ./backend/src:/app/src
      - ./backend/tests:/app/tests
    env_file:
      - .env.dev
    environment:
      - TEST_ENV=development
      - DEBUG=true
    command: ["./run_tests.sh"]
    networks:
      - app-network

  # Frontend tests (development only)
  frontend-tests:
    profiles: ["development"]
    build:
      context: .
      dockerfile: frontend/Dockerfile
    container_name: frontend-tests
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/tests:/app/tests
    env_file:
      - .env.dev
    environment:
      - TEST_ENV=development
      - DEBUG=true
    command: ["./run_tests.sh"]
    networks:
      - app-network

volumes:
  typesense_data:

networks:
  app-network:
    driver: bridge