# docker-compose.yml
services:
  # Typesense Search Service - Used in both development and production
  typesense:
    build:
      context: .  # Build from project root
      dockerfile: backend/Dockerfile.typesense  # Custom Typesense Dockerfile
    container_name: typesense-db  # Explicit container naming
    ports:
      - "${TYPESENSE_PORT}:8108"  # Map configured port to default Typesense port
    environment:
      - TYPESENSE_API_KEY=${TYPESENSE_API_KEY}  # Authentication key
      - TYPESENSE_DATA_DIR=/data  # Persistent data location
      - TYPESENSE_STARTUP_WAIT_SECONDS=30
    # Command override:
    command: >
      sh -c "echo 'Waiting for Typesense to initialize...' && 
      sleep $${TYPESENSE_STARTUP_WAIT_SECONDS} && 
      /usr/bin/typesense-server 
      --data-dir=$${TYPESENSE_DATA_DIR} 
      --api-key=$${TYPESENSE_API_KEY} 
      --listen-port=8108"
    volumes:
      - typesense_data:/data  # Named volume for search data persistence
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8108/health"]  # Health endpoint
      interval: 10s  # Check every 10 seconds
      timeout: 5s  # Fail if no response in 5s
      retries: ${TYPESENSE_HEALTHCHECK_RETRIES:-10}  # Configurable retries
    networks:
      - app-network  # Connect to application network

  # Backend API Service - Base configuration
  backend:
    build:
      context: .  # Build from project root
      dockerfile: backend/Dockerfile  # Backend-specific Dockerfile
    container_name: backend-app  # Explicit container naming
    env_file:
      - ./.env
    ports:
      - "${BACKEND_PORT}:8000"  # Map configured port to default backend port
    environment:
      # Environment configuration with defaults
      - ENV=${ENV:-development}  # dev/prod environment
      - DEBUG=${DEBUG:-true}  # Debug mode
      - PYTHONPATH=${BACKEND_PYTHONPATH:-/app/src}  # Python module path
      # Typesense connection parameters
      - TYPESENSE_HOST=${TYPESENSE_HOST}
      - TYPESENSE_PORT=${TYPESENSE_PORT}
      - TYPESENSE_API_KEY=${TYPESENSE_API_KEY}
      # Application parameters
      - BACKEND_PORT=${BACKEND_PORT}
      - TYPESENSE_PROTOCOL=${TYPESENSE_PROTOCOL:-http}  # Default to HTTP
      # Healthcheck and timeout parameters
      - BACKEND_STARTUP_DELAY=${BACKEND_STARTUP_DELAY:-10}
      - TYPESENSE_CONNECTION_TIMEOUT=${TYPESENSE_CONNECTION_TIMEOUT:-30}
    volumes:
      # Development mounts - overridden in production
      - ./backend/src:/app/src  # Source code mount
      - ./backend/static:/app/static  # Static files mount
      - ./.env:/app/.env:ro
    depends_on:
      typesense:
        condition: service_healthy  # Wait for healthy Typesense
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${BACKEND_PORT}/health || exit 1"]
      interval: 30s
      timeout: ${TYPESENSE_CONNECTION_TIMEOUT:-30}s
      retries: ${TYPESENSE_HEALTHCHECK_RETRIES:-5}
    networks:
      - app-network

  # Frontend Web Service - Base configuration
  frontend:
    build:
      context: .  # Build from project root
      dockerfile: frontend/Dockerfile  # Frontend-specific Dockerfile
    container_name: frontend-app  # Explicit container naming
    env_file:
      - ./.env
    ports:
      - "${FRONTEND_PORT}:8001"  # Map configured port to default frontend port
    environment:
      # Environment configuration with defaults
      - ENV=${ENV:-development}
      - PYTHONPATH=${FRONTEND_PYTHONPATH:-/app}
      - FRONTEND_PORT=${FRONTEND_PORT}
      - BACKEND_URL=${BACKEND_URL:-http://backend:8000}  # Default backend URL
    volumes:
      - ./frontend/src:/app/src  # Source code mount
      - ./frontend/src/app/static:/app/src/app/static  # Explicit static files mount
      - ./.env:/app/.env:ro
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8001/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      - backend  # Requires backend to be available
    networks:
      - app-network

  # Development NGINX Proxy
  nginx:
    image: nginx:stable-perl
    container_name: nginx-dev
    ports:
      - "8080:8080"
    volumes:
      - ./nginx/nginx.dev.conf:/etc/nginx/nginx.conf
      - ./frontend/src/app/static:/var/www/static
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - app-network
    command: ["nginx", "-g", "daemon off;"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3

# Network configuration
networks:
  app-network:
    driver: bridge  # Default bridge network for inter-container communication
    name: pers-network  # Add explicit name
    attachable: true
    external: false
    internal: false

# Volume declarations
volumes:
  typesense_data:  # Persistent storage for Typesense
    driver: local
